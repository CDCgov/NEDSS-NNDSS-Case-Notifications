//////////////////////////////////////////////
//	TYPE DEFINITIONS
//////////////////////////////////////////////

namespace Input
{
	type NBS_NND_Intermediary_Message = struct
	{
		MessageElement[] MessageElement;
		optional LabReportEvent[] LabReportEvent;
	};

	type MessageElement = struct
	{
		InFields::StringField questionIdentifierNND;
		InFields::StringField questionLabelNND;
		InFields::StringField questionOID;
		optional InFields::StringField questionIdentifier;
		optional InFields::StringField questionLabel;
		optional InFields::StringField hl7SegmentField;
		optional InFields::StringField orderGroupId;
		optional InFields::StringField observationSubID;
		optional InFields::StringField questionGroupSeqNbr;
		optional InFields::StringField repeatGroupSeqNbr;
		optional InFields::StringField questionMap;
		optional InFields::StringField indicatorCd;
		LocalComplex#1 dataElement;
	};

	type LocalComplex#1 = struct
	{
		InFields::StringField questionDataTypeNND;
		LocalComplex#1#Grp1 LocalComplex#1#Grp1;
	};

	type LocalComplex#1#Grp1 = variant
	{
		optional LocalComplex#2 snDataType;
		optional LocalComplex#3 snunitDataType;
		optional LocalComplex#4 stDataType;
		optional LocalComplex#5 txDataType;
		optional LocalComplex#6 cxDataType;
		optional LocalComplex#7 idDataType;
		optional LocalComplex#8 isDataType;
		optional LocalComplex#9 cweDataType;
		optional LocalComplex#10 ceDataType;
		optional LocalComplex#11 tsDataType;
		optional LocalComplex#12 dtDataType;
		optional LocalComplex#13 nmDataType;
		optional LocalComplex#14 xtnDataType;
		optional LocalComplex#15 xpnDataType;
		optional eiDataType eiDataType;
		LocalComplex#16 eipDataType;
		optional LocalComplex#19 hdDataType;
	};

	type LocalComplex#2 = struct
	{
		optional InFields::StringField comparator;
		optional InFields::StringField num1;
		optional InFields::StringField separatorSuffix;
		optional InFields::StringField num2;
	};

	type LocalComplex#3 = struct
	{
		optional InFields::StringField comparator;
		optional InFields::StringField num1;
		optional InFields::StringField separatorSuffix;
		optional InFields::StringField num2;
		InFields::StringField ceCodedValue;
		optional InFields::StringField ceCodedValueDescription;
		InFields::StringField ceCodedValueCodingSystem;
		optional InFields::StringField ceLocalCodedValue;
		optional InFields::StringField ceLocalCodedValueDescription;
		optional InFields::StringField ceLocalCodedValueCodingSystem;
	};

	type LocalComplex#4 = struct
	{
		InFields::StringField stringData;
	};

	type LocalComplex#5 = struct
	{
		InFields::StringField textData;
	};

	type LocalComplex#6 = struct
	{
		InFields::StringField cxData;
	};

	type LocalComplex#7 = struct
	{
		InFields::StringField idCodedValue;
	};

	type LocalComplex#8 = struct
	{
		InFields::StringField isCodedValue;
	};

	type LocalComplex#9 = struct
	{
		InFields::StringField cweCodedValue;
		optional InFields::StringField cweCodedValueDescription;
		InFields::StringField cweCodedValueCodingSystem;
		optional InFields::StringField cweLocalCodedValue;
		optional InFields::StringField cweLocalCodedValueDescription;
		optional InFields::StringField cweLocalCodedValueCodingSystem;
		optional InFields::StringField cweOriginalText;
	};

	type LocalComplex#10 = struct
	{
		InFields::StringField ceCodedValue;
		optional InFields::StringField ceCodedValueDescription;
		InFields::StringField ceCodedValueCodingSystem;
		optional InFields::StringField ceLocalCodedValue;
		optional InFields::StringField ceLocalCodedValueDescription;
		optional InFields::StringField ceLocalCodedValueCodingSystem;
	};

	type LocalComplex#11 = struct
	{
		optional InFields::StringField year;
		optional InFields::StringField time;
	};

	type LocalComplex#12 = struct
	{
		optional InFields::StringField year;
		optional InFields::StringField date;
	};

	type LocalComplex#13 = struct
	{
		InFields::StringField num;
	};

	type LocalComplex#14 = struct
	{
		InFields::StringField telecommunicationUseCode;
		InFields::StringField telecommunicationEquipmentType;
		optional InFields::StringField emailAddress;
		optional InFields::StringField areaOrCityCode;
		optional InFields::StringField phoneNumber;
	};

	type LocalComplex#15 = struct
	{
		InFields::StringField familyName;
		InFields::StringField givenName;
	};

	type eiDataType = struct
	{
		InFields::StringField entityIdentifier;
		InFields::StringField namespaceId;
		InFields::StringField universalId;
		InFields::StringField universalIdType;
	};

	type LocalComplex#16 = struct
	{
		LocalComplex#17 placerAssignedIdentifier;
		LocalComplex#18 fillerAssignedIdentifier;
	};

	type LocalComplex#17 = struct
	{
		optional eiDataType eiDataType;
	};

	type LocalComplex#18 = struct
	{
		optional eiDataType eiDataType;
	};

	type LocalComplex#19 = struct
	{
		InFields::StringField namespaceId;
		InFields::StringField universalId;
		InFields::StringField universalIdType;
	};

	type LabReportEvent = struct
	{
		LocalComplex#20[] ResultedTest;
		MessageElement[] MessageElement;
	};

	type LocalComplex#20 = struct
	{
		optional LabReportEvent[] LabReportEvent;
		MessageElement[] MessageElement;
	};


}



namespace InFields
{
	type StringField = struct
	{
		optional string #PCDATA;
	};

	type IntegerField = struct
	{
		optional int #PCDATA;
	};

	type DoubleField = struct
	{
		optional double #PCDATA;
	};

	type BooleanField = struct
	{
		optional boolean #PCDATA;
	};

	type BinaryField = struct
	{
		optional binary #PCDATA;
	};


}



namespace InXML
{
	type Element = struct
	{
		string name;
		optional string xmlns;
		optional Attribute[] attributes;
		optional Node[] children;
	};

	type Attribute = struct
	{
		string name;
		optional string xmlns;
		string value;
	};

	type Node = variant
	{
		Element element;
		string text;
		string cdata;
		string comment;
		string processingInstruction;
	};

	type Namespaces = struct
	{
		optional Namespace[] namespaces;
	};

	type Namespace = struct
	{
		string prefix;
		string xmlns;
	};


}



namespace Output
{
	type ORUR01 = struct
	{
		MSH MSH;
		ORUR01#PATIENT_RESULT PATIENT_RESULT;
	};

	type MSH = struct
	{
		string FieldSeparator;
		string EncodingCharacters;
		HD SendingApplication;
		HD SendingFacility;
		HD ReceivingApplication;
		HD ReceivingFacility;
		TS DateTimeOfMessage;
		optional string Security;
		MSG MessageType;
		string MessageControlID;
		PT ProcessingID;
		VID VersionID;
		optional double SequenceNumber;
		optional string ContinuationPointer;
		optional string AcceptAcknowledgementType;
		optional string ApplicationAcknowledgementType;
		optional string CountryCode;
		optional string CharacterSet;
		optional CE PrincipalLanguageOfMessage;
		optional string AlternateCharacterSetHandlingScheme;
		EI[] MessageProfileIdentifier;
	};

	type HD = struct
	{
		optional string NamespaceID;
		optional string UniversalID;
		optional string UniversalIDType;
	};

	type TS = struct
	{
		DTM Time;
		optional string Precision_DEPRECATED;
	};

	type DTM = struct
	{
		int Year;
		optional int Month;
		optional int Day;
		optional int Hours;
		optional int Minutes;
		optional int Seconds;
		optional string seperator;
		optional int Millis;
		optional string GmtOffset;
	};

	type MSG = struct
	{
		optional string MessageType;
		optional string TriggerEvent;
		optional string MessageStructure;
	};

	type PT = struct
	{
		optional string ProcessingID;
		optional string ProcessingMode;
	};

	type VID = struct
	{
		optional string VersionID;
		optional CE InternationalizationCode;
		optional CE InternationalVersionID;
	};

	type CE = struct
	{
		optional string Identifier;
		optional string Text;
		optional string NameOfCodingSystem;
		optional string AlternateIdentifier;
		optional string AlternateText;
		optional string NameOfAlternateCodingSystem;
	};

	type EI = struct
	{
		optional string EntityIdentifier;
		optional string NamespaceID;
		optional string UniversalID;
		optional string UniversalIDType;
	};

	type ORUR01#PATIENT_RESULT = struct
	{
		optional ORUR01#PATIENT_RESULT#PATIENT PATIENT;
		ORUR01#PATIENT_RESULT#ORDER_OBSERVATION[] ORDER_OBSERVATION;
	};

	type ORUR01#PATIENT_RESULT#PATIENT = struct
	{
		PID PID;
		optional NK1[] NK1;
	};

	type PID = struct
	{
		optional int SetID;
		optional CX PatientID;
		CX PatientIdentifierList;
		optional CX[] AlternatePatientID;
		optional XPN[] PatientName;
		optional XPN[] MothersMaidenName;
		optional TS DateTimeOfBirth;
		optional string Sex;
		optional XPN[] PatientAlias;
		optional CE[] Race;
		optional XAD[] PatientAddress;
		optional string CountyCode;
		optional XTN[] HomePhoneNumber;
		optional XTN[] BusinessPhoneNumber;
		optional CE PrimaryLanguage;
		optional CE MaritalStatus;
		optional CE Religion;
		optional CX PatientAccountNumber;
		optional string SSNNumber;
		optional DLN DriversLicenseNumber;
		optional CX[] MothersIdentifier;
		optional CE[] EthnicGroup;
		optional string BirthPlace;
		optional string MultipleBirthIndicator;
		optional double BirthOrder;
		optional CE[] Citizenship;
		optional CE VeteransMilitaryStatus;
		optional CE Nationality;
		optional TS PatientDeathDateAndTime;
		optional string PatientDeathIndicator;
		optional string IdentityUnknownIndicator;
		optional string[] IdentityReliabilityCode;
		optional TS LastUpdateDateTime;
		optional HD LastUpdateFacility;
		optional CE SpeciesCode;
		optional CE BreedCode;
		optional string Strain;
		optional CE[] ProductionClassCode;
		optional CWE TribalCitizenship;
	};

	type CX = struct
	{
		string IDNumber;
		optional string CheckDigit;
		optional string CodeIdentifyingTheCheckDigitSchemeEmployed;
		optional HD AssigningAuthority;
		optional string IdentifierTypeCode;
		optional HD AssigningFacility;
		optional DT EffectiveDate;
		optional DT ExpirationDate;
		optional CWE AssigningJurisdiction;
		optional CWE AssigningAgencyorDepartment;
	};

	type DT = struct
	{
		int Year;
		optional int Month;
		optional int Day;
	};

	type CWE = struct
	{
		optional string Identifier;
		optional string Text;
		optional string NameOfCodingSystem;
		optional string AlternateIdentifier;
		optional string AlternateText;
		optional string NameOfAlternateCodingSystem;
		optional string CodingSystemVersionID;
		optional string AlternateCodingSystemVersionID;
		optional string OriginalText;
	};

	type XPN = struct
	{
		optional FN FamilyName;
		optional string GivenName;
		optional string MiddleInitialOrName;
		optional string Suffix;
		optional string Prefix;
		optional string Degree_DEPRECATED;
		optional string NameTypeCode;
		optional string NameRepresentationCode;
		optional CE NameContext;
		optional DR NameValidityRange_DEPRECATED;
		optional string NameAssemblyOrder;
		optional TS EffectiveDate;
		optional TS ExpirationDate;
		optional string ProfessionalSuffix;
	};

	type FN = struct
	{
		string Surname;
		optional string OwnSurnamePrefix;
		optional string OwnSurname;
		optional string SurnamePrefixFromPartner;
		optional string SurnameFromPartner;
	};

	type DR = struct
	{
		optional TS RangeStartDateTime;
		optional TS RangeEndDateTime;
	};

	type XAD = struct
	{
		optional SAD StreetAddress;
		optional string OtherDesignation;
		optional string City;
		optional string StateOrProvince;
		optional string ZipOrPostalCode;
		optional string Country;
		optional string AddressType;
		optional string OtherGeographicDesignation;
		optional string CountyOrParishCode;
		optional string CensusTract;
		optional string AddressRepresentationCode;
		optional DR AdressValidityRange_DEPRECATED_FROM_2_5;
		optional TS EffectiveDate;
		optional TS ExpirationDate;
	};

	type SAD = struct
	{
		optional string StreetOrMailingAddress;
		optional string StreetName;
		optional string DwellingNumber;
	};

	type XTN = struct
	{
		optional string PhoneNumberString_DEPRECATED_FROM_2_3;
		optional string TelecommunicationUseCode;
		optional string TelecommunicationEquipmentType;
		optional string EmailAddress;
		optional double CountryCode;
		optional double AreaOrCityCode;
		optional double PhoneNumber;
		optional double Extension;
		optional string AnyText;
		optional string ExtensionPrefix;
		optional string SpeedDialCode;
		optional string UnformattedTelephonenumber;
	};

	type DLN = struct
	{
		string LicenseNumber;
		optional string IssuingStateProvinceCountry;
		optional DT ExpirationDate;
	};

	type NK1 = struct
	{
		int SetID;
		optional XPN[] NextOfKinName;
		optional CE Relationship;
		optional XAD Address;
		optional XTN[] PhoneNumber;
		optional XTN[] BusinessPhoneNumber;
		optional CE ContactRole;
		optional DT StartDate;
		optional DT EndDate;
		optional string NextOfKinAssociatedPartiesJobTitle;
		optional JCC NextOfKinAssociatedPartiesJobCodeClass;
		optional CX NextOfKinAssociatedPartiesEmployeeNumber;
		optional XON OrganizationName;
		optional CE MaritalStatus;
		optional string Sex;
		optional TS DateTimeOfBirth;
		optional string LivingDependency;
		optional string AmbulatoryStatus;
		optional CE Citizenship;
		optional CE PrimaryLanguage;
		optional string LivingArrangement;
		optional CE PublicityCode;
		optional string ProtectionIndicator;
		optional string StudentIndicator;
		optional CE Religion;
		optional XPN MothersMaidenName;
		optional CE Nationality;
		optional CE EthnicGroup;
		optional CE ContactReason;
		optional XPN[] ContactPersonsName;
		optional XTN[] ContactPersonsTelephoneNumber;
		optional XAD ContactPersonsAddress;
		optional CX[] NextOfKinAssociatedPartysIdentifiers;
		optional string JobStatus;
		optional CE[] Race;
		optional string Handicap;
		optional string ContactPersonSocialSecurityNumber;
		optional string NextofKinBirthPlace;
		optional string VIPIndicator;
	};

	type JCC = struct
	{
		optional string JobCode;
		optional string JobClass;
		optional string JobDescriptionText;
	};

	type XON = struct
	{
		optional string OrganizationName;
		optional string OrganizationNameTypeCode;
		optional double IDNumber_DEPRECATED;
		optional double CheckDigit;
		optional string CodeIdentifyingTheCheckDigitSchemeEmployed;
		optional HD AssigningAuthority;
		optional string IdentifierTypeCode;
		optional HD AssigningFacilityID;
		optional string NameRepresentationCode;
		optional string OrganizationIdentifier;
	};

	type ORUR01#PATIENT_RESULT#ORDER_OBSERVATION = struct
	{
		OBR[] OBR;
		optional NTE NTE;
		optional ORUR01#PATIENT_RESULT#ORDER_OBSERVATION#OBSERVATION[] OBSERVATION;
		optional ORUR01#PATIENT_RESULT#ORDER_OBSERVATION#Specimen[] Specimen;
	};

	type OBR = struct
	{
		int SetID;
		EI PlacerOrderNumber;
		EI FillerOrderNumber;
		CE UniversalServiceID;
		optional string Priority;
		optional TS RequestedDateTime;
		TS ObservationDateTime;
		optional TS ObservationEndDateTime;
		optional CQ CollectionVolume;
		optional XCN[] CollectorIdentifier;
		optional string SpecimenActionCode;
		optional CE DangerCode;
		optional string RelevantClinicalInfo;
		optional TS SpecimenReceivedDateTime;
		optional SPS SpecimenSource;
		optional XCN[] OrderingProvider;
		optional XTN[] OrderCallbackPhoneNumber;
		optional string PlacerField1;
		optional string PlacerField2;
		optional string FillerField1;
		optional string FillerField2;
		TS ResultsRptStatusChngDateTime;
		optional MOC ChargeToPractice;
		optional string DiagnosticServSectID;
		string ResultStatus;
		optional PRL ParentResult;
		optional TQ[] QuantityTiming;
		optional XCN[] ResultCopiesTo;
		optional EIP ParentNumber;
		optional string TransportationMode;
		optional CE[] ReasonForStudy;
		optional NDL PrincipalResultInterpreter;
		optional NDL[] AssistantResultInterpreter;
		optional NDL[] Technician;
		optional NDL[] Transcriptionist;
		optional TS ScheduledDateTime;
		optional double NumberOfSampleContainers;
		optional CE[] TransportLogisticsOfCollectedSample;
		optional CE[] CollectorsComment;
		optional CE TransportArrangementResponsibility;
		optional string TransportArranged;
		optional string EscortRequired;
		optional CE[] PlannedPatientTransportComment;
		optional CE ProcedureCode;
		optional CE[] ProcedureCodeModifier;
		optional CE[] PlacerSupplementalServiceInformation;
		optional CE[] FillerSupplementalServiceInformation;
		optional CWE MedicallyNecessaryDuplicateProcedureReason;
		optional string ResultHandling;
	};

	type CQ = struct
	{
		optional double Quantity;
		optional CE Units;
	};

	type XCN = struct
	{
		optional string IDNumber;
		optional FN FamilyName;
		optional string GivenName;
		optional string MiddleInitialOrName;
		optional string Suffix;
		optional string Prefix;
		optional string Degree_DEPRECATED_FROM_2_5;
		optional string SourceTable;
		optional HD AssigningAuthority;
		optional string NameTypeCode;
		optional string IdentifierCheckDigit;
		optional string CodeIdentifyingTheCheckDigitSchemeEmployed;
		optional string IdentifierTypeCode;
		optional HD AssigningFacility;
		optional string NameRepresentationCode;
		optional CE NameContext;
		optional DR NameValidityRange_DEPRECATED;
		optional string NameAssemblyOrder;
		optional TS EffectiveDate;
		optional TS ExpirationDate;
		optional string ProfessionalSuffix;
		optional CWE AssigningJurisdiction;
		optional CWE AssigningAgencyorDepartment;
	};

	type SPS = struct
	{
		optional CWE SpecimenSourceNameOrCode;
		optional CWE Additives;
		optional string SpecimenCollectionMethod;
		optional CWE BodySite;
		optional CWE SiteModifier;
		optional CWE CollectionMethodModifierCode;
		optional CWE SpecimenRole;
	};

	type MOC = struct
	{
		optional MO DollarAmount;
		optional CE ChargeCode;
	};

	type MO = struct
	{
		optional double Quantity;
		optional string Denomination;
	};

	type PRL = struct
	{
		CE ParentObservationIdentifier;
		optional string ParentObservationSubIdentifier;
		optional string ParentObservationValueDescriptor;
	};

	type TQ = struct
	{
		optional CQ Quantity;
		optional RI Interval;
		optional string Duration;
		optional TS StartDateTime;
		optional TS EndDateTime;
		optional string Priority;
		optional string Condition;
		optional string Text;
		optional string Conjunction;
		optional OSD OrderSequencing;
		optional CE OccurrenceDuration;
		optional double TotalOccurrences;
	};

	type RI = struct
	{
		optional string RepeatPattern;
		optional string ExplicitTimeInterval;
	};

	type OSD = struct
	{
		optional string SequenceOrResultsFlag;
		optional string PONEntityIdentifier;
		optional string PONNamespaceID;
		optional string FONEntityIdentifier;
		optional string FONNamespaceID;
		optional string SequenceConditionValue;
		optional double MaximumNumOfRepeats;
		optional string PONUniversalID;
		optional string PONUniversalIDType;
		optional string FONUniversalID;
		optional string FONUniversalIDType;
	};

	type EIP = struct
	{
		optional EI PlacerAssignedIdentifier;
		optional EI FillerAssignedIdentifier;
	};

	type NDL = struct
	{
		optional CN PersonName;
		optional TS StartDateTime;
		optional TS EndDateTime;
		optional string PointOfCare;
		optional string Room;
		optional string Bed;
		optional HD Facility;
		optional string LocationStatus;
		optional string PatientLocationType;
		optional string Building;
		optional string Floor;
	};

	type CN = struct
	{
		optional string IDNumber;
		optional FN FamilyName;
		optional string GivenName;
		optional string MiddleInitialOrName;
		optional string Suffix;
		optional string Prefix;
		optional string Degree;
		optional string SourceTable;
		optional HD AssigningAuthority;
	};

	type NTE = struct
	{
		optional int SetID;
		optional string SourceOfComment;
		optional string[] Comment;
		optional CE CommentType;
	};

	type ORUR01#PATIENT_RESULT#ORDER_OBSERVATION#OBSERVATION = struct
	{
		OBX[] OBX;
		optional NTE[] NTE;
	};

	type OBX = struct
	{
		int SetID;
		string ValueType;
		CE ObservationIdentifier;
		optional string ObservationSubID;
		optional string[] ObservationValue;
		optional CE Units;
		optional string ReferencesRange;
		optional string[] AbnormalFlags;
		optional double Probability;
		optional string[] NatureOfAbnormalTest;
		string ObservationResultStatus;
		optional TS DateLastObsNormalValues;
		optional string UserDefinedAccessChecks;
		optional TS DateTimeOfTheObservation;
		optional CE ProducersID;
		optional XCN[] ResponsibleObserver;
		optional CE[] ObservationMethod;
		optional EI[] EquipmentInstanceIdentifier;
		optional TS DateTimeOfTheAnalysis;
	};

	type ORUR01#PATIENT_RESULT#ORDER_OBSERVATION#Specimen = struct
	{
		SPM SPM;
		optional OBX[] OBX;
	};

	type SPM = struct
	{
		optional int SetID;
		optional EIP SpecimenID;
		optional EIP[] SpecimenParentIDs;
		CWE SpecimenType;
		optional CWE[] SpecimenTypeModifier;
		optional CWE[] SpecimenAdditives;
		optional CWE SpecimenCollectionMethod;
		optional CWE SpecimenSourceSite;
		optional CWE[] SpecimenSourceSiteModifier;
		optional CWE SpecimenCollectionSite;
		optional CWE[] SpecimenRole;
		optional CQ SpecimenCollectionAmount;
		optional double GroupedSpecimenCount;
		optional string[] SpecimenDescription;
		optional CWE[] SpecimenHandlingCode;
		optional CWE[] SpecimenRiskCode;
		optional DR SpecimenCollectionDateTime;
		optional TS SpecimenReceivedDateTime;
		optional TS SpecimenExpirationDateTime;
		optional string SpecimenAvailability;
		optional CWE[] SpecimenRejectReason;
		optional CWE SpecimenQuality;
		optional CWE SpecimenAppropriateness;
		optional CWE[] SpecimenCondition;
		optional CQ SpecimenCurrentQuantity;
		optional double NumberofSpecimenContainers;
		optional CWE ContainerType;
		optional CWE ContainerCondition;
		optional CWE SpecimenChildRole;
	};


}



//////////////////////////////////////////////
//	EXTERNAL FUNCTIONS
//////////////////////////////////////////////

// Retrieves value from registry
external string GetRegString(  string p1,  string p2,  string p3 ) = "StdFunctions.dll";

// Retrieve the given number of leftmost characters from a string
external string StrLeft(  string p1,  int p2 ) = "StdFunctions.dll";

// Retrieve the given number of rightmost characters from a string
external string StrRight(  string p1,  int p2 ) = "StdFunctions.dll";

// Retrieves characters from the middle of a string
external string StrMid(  string p1,  int p2,  int p3 ) = "StdFunctions.dll";

// Replaces all occurences of a sub-string within a string with the specified replacement string
external string StrReplace(  string p1,  string p2,  string p3 ) = "StdFunctions.dll";

// Removes all occurences of a sub-string from within a string
external string StrRemove(  string p1,  string p2 ) = "StdFunctions.dll";

// Removes all occurences of a set of characters from within a string
external string StrRemoveChars(  string p1,  string p2 ) = "StdFunctions.dll";

// Find the location of a sub-string in a string - looking from back to front
external int StrRFind(  string p1,  string p2 ) = "StdFunctions.dll";

// Reverse a string
external string StrReverse(  string p1 ) = "StdFunctions.dll";

// Check whether the input string is numeric or not
external boolean IsNumeric(  string p1 ) = "StdFunctions.dll";

// Converts a string to its matching integer
external int StrToInt(  string p1 ) = "StdFunctions.dll";

// Deprecated. May not produce the same output in the Java engine. Use StrToInt instead
external int StrToIntDeprecated(  string p1 ) = "StdFunctions.dll";

// Converts an integer to its matching string representation
external string IntToStr(  int p1 ) = "StdFunctions.dll";

// Converts a string to its matching double precision representation
external double StrToDbl(  string p1 ) = "StdFunctions.dll";

// Converts a double to its matching string representation
external string DblToStr(  double p1 ) = "StdFunctions.dll";

// Find the location of a child string in its parent
external int StrFind(  string p1,  string p2 ) = "StdFunctions.dll";

// Retrieves the size of a string
external int StrSize(  string p1 ) = "StdFunctions.dll";

// Converts a string to upper case
external string StrToUpper(  string p1 ) = "StdFunctions.dll";

// Converts a string to lower case
external string StrToLower(  string p1 ) = "StdFunctions.dll";

// Trims the leading and trailing white space off a string
external string StrTrim(  string p1 ) = "StdFunctions.dll";

// Trims the left hand white space off a string
external string StrTrimL(  string p1 ) = "StdFunctions.dll";

// Trims the right hand white space off a string
external string StrTrimR(  string p1 ) = "StdFunctions.dll";

// Converts a double to the matching integer (truncates)
external int DblToInt(  double p1 ) = "StdFunctions.dll";

// Converts an integer to its matching double representation
external double IntToDbl(  int p1 ) = "StdFunctions.dll";

// Rounds a double to the given number of decimal places
external double Round(  double p1,  int p2 ) = "StdFunctions.dll";

// Calculate the square root of a number (double)
external double SquareRoot(  double p1 ) = "StdFunctions.dll";

// Retrieves the current date
external string CurrentDate(  boolean p1 ) = "StdFunctions.dll";

// Retrieves the current time
external string CurrentTime(  ) = "StdFunctions.dll";

// Retrieves the current date and time
external string CurrentDateTime(  boolean p1 ) = "StdFunctions.dll";

// Retrieves the current date and time in the given format
external string FormatCurrentDateTime(  string p1 ) = "StdFunctions.dll";

// Adds the given number of days to a date
external string DateAddDays(  string p1,  int p2,  boolean p3 ) = "StdFunctions.dll";

// Gives the difference in Years, Months and Days between two dates
external string DateDifferenceAsString(  string p1,  string p2,  boolean p3 ) = "StdFunctions.dll";

// Gives the difference in days between two dates
external int DateDifferenceInDays(  string p1,  string p2,  boolean p3 ) = "StdFunctions.dll";

// Retrieve the current date/time as a string that conforms to SQL Server's datetime type
external string SQLServCurrentDateTime(  ) = "StdFunctions.dll";

// Retrieve the current date/time as a string that conforms to SQL Server's smalldatetime type
external string SQLServCurrentSmallDateTime(  ) = "StdFunctions.dll";

// Converts the given date/time info to a string that conforms to SQL Server's datetime type
external string SQLServGetDateTimeString(  int p1,  int p2,  int p3,  int p4,  int p5,  int p6,  int p7 ) = "StdFunctions.dll";

// Converts the given date/time info to a string that conforms to SQL Server's smalldatetime type
external string SQLServGetSmallDateTimeString(  int p1,  int p2,  int p3,  int p4,  int p5 ) = "StdFunctions.dll";

// Formats the given date/time details
external string FormatTime(  string p1,  int p2,  int p3,  int p4,  int p5,  int p6,  int p7,  int p8 ) = "StdFunctions.dll";

// Search for the regular expression in the given string
external int StrRegFind(  string p1,  string p2 ) = "StdFunctions.dll";

// Search for the regular expression in the given string
external int StrRegFindFromPos(  string p1,  string p2,  int p3, -> int p4 ) = "StdFunctions.dll";

// Retrieve a specific string value from a .ini file
external boolean GetINIString(  string p1,  string p2,  string p3, -> string p4 ) = "StdFunctions.dll";

// Retrieve a specific int value from a .ini file
external boolean GetINIInt(  string p1,  string p2,  string p3, -> int p4 ) = "StdFunctions.dll";

// Retrieve a specific boolean value from a .ini file
external boolean GetINIBoolean(  string p1,  string p2,  string p3, -> boolean p4 ) = "StdFunctions.dll";

// Retrieve a specific double value from a .ini file
external boolean GetINIDouble(  string p1,  string p2,  string p3, -> double p4 ) = "StdFunctions.dll";

// Look up the input in a translation file, and update the output variable
external string DataMap(  string p1, -> string p2,  string p3,  string p4,  string p5 ) = "StdFunctions.dll";

// Look up the input in a translation file, and update the output variable
external string DataMapColumns(  string p1, -> string p2,  int p3,  int p4,  string p5,  string p6,  string p7 ) = "StdFunctions.dll";

// Create a Universally Unique Identifier (UUID). For example, "de6a80c7-4211-4f92-8fa9-3d336c3b0e2e".
external string CreateUUID(  ) = "StdFunctions.dll";

// Convert a date from one format to another using Java's SimpleDateFormat format strings.
external string DateChangeFormat(  string p1,  string p2,  string p3 ) = "StdFunctions.dll";

// Add leading padding to bring the text up to the required length. The padding string must only contain one character.
external string StrPadLeft(  string p1,  int p2,  string p3 ) = "StdFunctions.dll";

// Add trailing padding to bring the text up to the required length. The padding string must only contain one character.
external string StrPadRight(  string p1,  int p2,  string p3 ) = "StdFunctions.dll";

// Add leading zeros to bring the text up to the required length.
external string StrZeroPad(  string p1,  int p2 ) = "StdFunctions.dll";

// Removes any padding characters from both ends of the string.
external string StrTrimChars(  string p1,  string p2 ) = "StdFunctions.dll";

// Removes any padding characters from left hand side of the string.
external string StrTrimLeftChars(  string p1,  string p2 ) = "StdFunctions.dll";

// Removes any padding characters from right hand side of the string.
external string StrTrimRightChars(  string p1,  string p2 ) = "StdFunctions.dll";

// Removes any zero characters from left hand side of the string.
external string StrTrimZeroPadding(  string p1 ) = "StdFunctions.dll";

// Remove non-letters from the string.
external string StrLetters(  string p1 ) = "StdFunctions.dll";

// Remove the non-numbers from the string.
external string StrNumbers(  string p1 ) = "StdFunctions.dll";

// Create a separated list of letter sequences.
external string StrLettersList(  string p1,  string p2 ) = "StdFunctions.dll";

// Create a separated list of number sequences.
external string StrNumbersList(  string p1,  string p2 ) = "StdFunctions.dll";

// Count the number of separated fields.
external int StrFieldCount(  string p1,  string p2 ) = "StdFunctions.dll";

// Extract the text of a specific separated field. Field numbers start from one.
external string StrFieldExtract(  string p1,  string p2,  int p3 ) = "StdFunctions.dll";

// Converts a string to its matching long
external long StrToLong(  string p1 ) = "StdFunctions.dll";

// Converts an long to its matching string representation
external string LongToStr(  long p1 ) = "StdFunctions.dll";

// Converts a long to its matching integer representation
external int LongToInt(  long p1 ) = "StdFunctions.dll";

// Converts a double to its matching long representation
external long DblToLong(  double p1 ) = "StdFunctions.dll";

// Converts an integer to its matching long representation
external long IntToLong(  int p1 ) = "StdFunctions.dll";

// Converts a long to its matching double representation
external double LongToDbl(  long p1 ) = "StdFunctions.dll";

// Access a Rhapsody table for code lookup and translation
external boolean RhapsodyTableLookup( -> string p1,  string p2,  string p3,  string p4,  string p5,  string p6 ) = "StdFunctions.dll";

//////////////////////////////////////////////
//	GLOBALS
//////////////////////////////////////////////

// Insert global declarations here...
// global string gbStr = "My Global String"


type obxRepeatingElement = struct { 
	string elementUID;
	string questionGroupSeqNbr;
	string observationSubID;
	int obxInc;
	int valueInc;
};

type DiscreteRepeat = struct {
	string code;
	string indicatorCode;
	string mappedIndicatorCode;
	int obx4counter;
	int counter;
	int obxCounter;
	string otherText;
};
	
type EIElement = struct { 
	string EntityIdentifier;
	string NamespaceID;
	string UniversalID;
	string UniversalIDType;
};

type ParentLink = struct { 
	string Identifier;
	string NameOfCodingSystem;
	string Text;
	string AlternateIdentifier;
	string NameOfAlternateCodingSystem;
	string AlternateText;
	string ObservationSubID;
	string ObservationValue;
	
};

type ResultMethod = struct {
	string code;
	string NameOfCodingSystem;
	string Text;
};
type DiscreteMulti = struct {
	string code;
	string indicatorCode;
	string cweQuestionIdentifier;
	string snuIndicatorCode;
	int counter;
	int ObsValueCounter;
	string otherText;
};

type DynamicRepeatMulti = struct {
	string parentCode;
	int obx4counter;
	//string numVar;
	//int numCounter;
	string partIndicator;
	int repeating;
	
};

global DiscreteMulti  discreteMulti;
global DiscreteMulti[]  repeatMultiArray;
global DiscreteRepeat[]  discreteRepeatArray;
global DiscreteRepeat[]  discreteRepeatSNTypeArray;
global DynamicRepeatMulti[]  dynamicRepeatMultiArray;
global string mappingERROR="";
global string pPHINAction;
global string pPHINService="";
		

//////////////////////////////////////////////
//	PROCEDURES
//////////////////////////////////////////////

// Main procedure for Mapping from NBS_NND_Intermediary_Message to ORUR01
map mainNBS_NND_Intermediary_Message( <- Input::NBS_NND_Intermediary_Message in, -> Output::ORUR01 out )
{
////////////////////////////////////////////////////////////////
	// Declare/Init variables
	////////////////////////////////////////////////////////////////
 
	//Array to handle repeating OBX 5 segments
	obxRepeatingElement[] obxRepeatingElementArray;

	//Seed incrementors for repeating segmentfs
	int raceInc = 0;
	int citizenshipInc = 0;
	int cityInc = 0;
	int stateInc = 0;
	int zipInc = 0;
	int addressTypeInc = 0;
	int countryInc = 0;
	int countyInc = 0;
	int identityReliabilityCodeInc = 0;
	int productionClassCodeInc = 0;
	int nk1RaceInc = 0;
	int obx1Inc = 0;
	int obx2Inc = 0;
	int maxObr = 0;
	int maxObx = 0;
	string messageType ="other";
	string stateLocalId="";
	boolean isDefaultNull= true;
	//Format used for current date/time
	string currentTime = FormatCurrentDateTime("%Y-%m-%dT%H:%M:%S.%i");
	boolean isSingleGuide= true;
	string val11="";
	string val12="";
	string val13="";
	string val14="";
	string val21="";
	string val22="";
	string val23="";
	string val24="";
	string inv177Date = "";
	string newDate="";
	boolean inv177Found = false;
	string STData="";
	string CXData="";
	string entityIdentifier2="";
	
	string fillerOrderNumberNamespaceID2="";
	
	string fillerOrderNumberUniversalID2="";
	
	string fillerOrderNumberUniversalIDType2="";
	
	string resultStatusChgTime="";
	string observationDateTime="";
	string emptyType="";
	string OBR7="";
	string OBR7DataType="";
	string OBR7QuestionDataTypeNND="";
	string OBR22="";
	string OBR22DataType="";
	string OBR22QuestionDataTypeNND="";
	
	string universalServiceIDIdentifier1="";
	string universalServiceIDIdentifier2="";
	
	string universalServiceIDText1="";
	string universalServiceIDText2="";
	
	string universalServiceIDNameOfCodingSystem1="";
	string universalServiceIDNameOfCodingSystem2="";
	
	
	string resultsRptStatusChngDateTime1="";
	string resultsRptStatusChngDateTime2="";
	
	string idCodedValue1="";
	string idCodedValue2="";
	
	string reasonForStudyIdentifier1="";
	string reasonForStudyText1="";
	string reasonForStudyNameOfCodingSystem1="";
	string reasonForStudyAlternateIdentifier1="";
	string reasonForStudyAlternateText1="";
	string reasonForStudyNameOfAlternateCodingSystem1="";
	
	string reasonForStudyIdentifier2="";
	string reasonForStudyText2="";
	string reasonForStudyNameOfCodingSystem2="";
	string reasonForStudyAlternateIdentifier2="";
	string reasonForStudyAlternateText2="";
	string reasonForStudyNameOfAlternateCodingSystem2="";
	string nndmessageVersion="";	

	//Repeating block for lab
	int drugCounter = 0;
	int dupRepeatCongenitalCounter = 0;
	int inv290Inv291Counter = 0;
	int inv290Inv291Counter1 = 0;
	int inv290Inv291Counter2 = 0;
	int std121ObxInc = -1;
	int std121obxOrderGroupId = 0;
	int std121ObsValue = -1;
	string NBS246observationSubID ="";
	string std300="";
	int raceCounterNK1 = 0;
	string OTH_COMP_TEXT = "";
	string OTH_COMP_REPLACE ="";
	int complicationCounter = 0;
	string OTH_SANDS_TEXT = "";
	string OTH_SANDS_REPLACE ="";
	int signSymptomsCounter = 0;
	boolean INV162RepeatIndicator = false;
	
	////////////////HCW Specific changes///////////////
	boolean genericMMGV20=false;
	boolean hcwTextBeforeCodedInd=false;
	string hcw="";
	int hcwTextcounter=-1;
	int hcwObxInc=-1;
	int hcwObxOrderGroupId=-1;
	int hcwObx5ValueInc=-1;
	
	////////////////////////////////////////////////////////////////
	// Create PID Segments from static information
	////////////////////////////////////////////////////////////////

	//Create PID-1
	out.PATIENT_RESULT.PATIENT.PID.SetID = 1;
	////////////////////////////////////////////////////////////////
	// Create OBR Segments from static information
	////////////////////////////////////////////////////////////////

	//Create OBR-1 for both OBR's
	out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].SetID = 1;
//	out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].SetID = 2;
	

	////////////////////////////////////////////////////////////////
	// Iterate through the NBS NND Intermediary message and create
	// appropriate segments based on message content
	////////////////////////////////////////////////////////////////
	for(int i=0;i<sizeof(in.MessageElement[*]); i=i+1 )
	{
		string hl7Field = (in.MessageElement[i].hl7SegmentField.#PCDATA);
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-3.1")
		{
			out.MSH.SendingApplication.NamespaceID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-3.2")
		{
			out.MSH.SendingApplication.UniversalID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-3.3")
		{
			out.MSH.SendingApplication.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-4.1")
		{
			out.MSH.SendingFacility.NamespaceID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-4.2")
		{
			out.MSH.SendingFacility.UniversalID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-4.3")
		{
			out.MSH.SendingFacility.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-5.1")
		{
			out.MSH.ReceivingApplication.NamespaceID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-5.2")
		{
			out.MSH.ReceivingApplication.UniversalID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-5.3")
		{
			out.MSH.ReceivingApplication.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-6.1")
		{
			out.MSH.ReceivingFacility.NamespaceID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-6.2")
		{
			out.MSH.ReceivingFacility.UniversalID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-6.3")
		{
			out.MSH.ReceivingFacility.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-9.3")
		{
			out.MSH.MessageType.MessageStructure = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-11.1")
		{
			out.MSH.ProcessingID.ProcessingID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-12.1")
		{
			out.MSH.VersionID.VersionID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-10.0")
		{
			out.MSH.MessageControlID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA + currentTime;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.1" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			nndmessageVersion=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			out.MSH.MessageProfileIdentifier[0].EntityIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.2" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			out.MSH.MessageProfileIdentifier[0].NamespaceID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.3" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			out.MSH.MessageProfileIdentifier[0].UniversalID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.4" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			out.MSH.MessageProfileIdentifier[0].UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.0" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{	
			isSingleGuide=false;
			val11=  in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.2" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val12= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.3" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val13= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.4" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val14= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		
		
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.0" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			messageType= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;

			val21= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			if(val21=="Generic_MMG_V2.0"){
				genericMMGV20=true;
			}
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.2" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val22= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.3" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val23= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "MSH-21.4" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			val24 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (StrLeft(hl7Field,4 )=="NK1-")
		{
			out.PATIENT_RESULT.PATIENT.NK1[0].SetID = 1;
			MapToNK1Element(in.MessageElement[i], raceCounterNK1,hl7Field, out.PATIENT_RESULT.PATIENT.NK1[0]);

		}
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-3.1")
		{
			if(in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA =="CX")
				out.PATIENT_RESULT.PATIENT.PID.PatientIdentifierList.IDNumber= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cxDataType.cxData.#PCDATA;
			if(in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA =="ST")
			out.PATIENT_RESULT.PATIENT.PID.PatientIdentifierList.IDNumber= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-3.4.1")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientIdentifierList.AssigningAuthority.NamespaceID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		//Create PID 3.4.2
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-3.4.2")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientIdentifierList.AssigningAuthority.UniversalID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}			
		//Create PID 3.4.3
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-3.4.3")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientIdentifierList.AssigningAuthority.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}			
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-5.7")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientName[1].NameTypeCode = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		//PID Date of Birth
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-7.0")
		{
			if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time))
			{
				//MapStringToDT( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.PATIENT.PID.DateTimeOfBirth.Time );
				MapToTSDataType( 
				in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA,
				"", 
				in.MessageElement[i].hl7SegmentField.#PCDATA, 
				messageType, 
				in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, 
				out.PATIENT_RESULT.PATIENT.PID.DateTimeOfBirth.Time );

			}
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-8.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.Sex = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-10.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Race[raceInc].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			raceInc = raceInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.3")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[cityInc].City = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			cityInc = cityInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.4")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[stateInc].StateOrProvince = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
			stateInc = stateInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.5")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[zipInc].ZipOrPostalCode = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			zipInc = zipInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.6")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[countryInc].Country = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
			countryInc = countryInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.7")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[addressTypeInc].AddressType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
			addressTypeInc = addressTypeInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.9")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[countyInc].CountyOrParishCode = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
			countyInc = countyInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-11.10")
		{
			out.PATIENT_RESULT.PATIENT.PID.PatientAddress[0].CensusTract = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-15.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.PrimaryLanguage.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-16.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.MaritalStatus.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-17.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.Religion.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Religion.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Religion.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Religion.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Religion.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Religion.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-22.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.EthnicGroup[0].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-23.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.BirthPlace = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-24.0")
		{
			 out.PATIENT_RESULT.PATIENT.PID.MultipleBirthIndicator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-25.0")
		{
			 out.PATIENT_RESULT.PATIENT.PID.BirthOrder = StrToDbl(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.nmDataType.num.#PCDATA);
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-26.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.Citizenship[citizenshipInc].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
			citizenshipInc = citizenshipInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-27.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.VeteransMilitaryStatus.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-29.0")
		{
			if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time))
			{
				//MapStringToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.PATIENT.PID.PatientDeathDateAndTime.Time );
				MapToTSDataType( 
				in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, 
				"", 
				in.MessageElement[i].hl7SegmentField.#PCDATA, 
				messageType, 
				in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, 
				out.PATIENT_RESULT.PATIENT.PID.PatientDeathDateAndTime.Time );

			}
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-30.0")
		{
			 out.PATIENT_RESULT.PATIENT.PID.PatientDeathIndicator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-31.0")
		{
			 out.PATIENT_RESULT.PATIENT.PID.IdentityUnknownIndicator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-32.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.IdentityReliabilityCode[identityReliabilityCodeInc] = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
			identityReliabilityCodeInc = identityReliabilityCodeInc + 1;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-33.0")
		{
			if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time))
			{
				//MapStringToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.PATIENT.PID.LastUpdateDateTime.Time );
				MapToTSDataType( 
				in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, 
				"", 
				in.MessageElement[i].hl7SegmentField.#PCDATA, 
				messageType, 
				in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, 
				out.PATIENT_RESULT.PATIENT.PID.LastUpdateDateTime.Time);

			}
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-34.1")
		{
			out.PATIENT_RESULT.PATIENT.PID.LastUpdateFacility.NamespaceID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-34.2")
		{
			out.PATIENT_RESULT.PATIENT.PID.LastUpdateFacility.UniversalID=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-34.3")
		{
			out.PATIENT_RESULT.PATIENT.PID.LastUpdateFacility.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}	
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-35.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.SpeciesCode.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-36.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.BreedCode.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-37.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.Strain = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "PID-38.0")
		{
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.PID.ProductionClassCode[productionClassCodeInc].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			productionClassCodeInc = productionClassCodeInc + 1;
		}		
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "NK1-28.0")
		{
			out.PATIENT_RESULT.PATIENT.NK1[0].SetID = 1;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].EthnicGroup.NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "NK1-35.0")
		{
			out.PATIENT_RESULT.PATIENT.NK1[0].SetID = 1;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.PATIENT.NK1[0].Race[nk1RaceInc].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
			nk1RaceInc = nk1RaceInc + 1;
		}		
		
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.1")
		{
			//Create for both OrderGroups				
			entityIdentifier2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].FillerOrderNumber.EntityIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
//			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.EntityIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			stateLocalId=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		//Create OBR-3.2 for both OBR's
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.2" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].FillerOrderNumber.NamespaceID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.2" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			fillerOrderNumberNamespaceID2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.NamespaceID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;	
		}
		//Create OBR-3.3 for both OBR's
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.3" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].FillerOrderNumber.UniversalID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.3" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			fillerOrderNumberUniversalID2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.UniversalID = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		//Create OBR-3.4 for both OBR's
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.4" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].FillerOrderNumber.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-3.4" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			fillerOrderNumberUniversalIDType2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.UniversalIDType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.1" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.Identifier = "68991-9";
			universalServiceIDIdentifier1 =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.2" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			universalServiceIDText1 =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.Text = "Epidemiologic Information";
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.3" && in.MessageElement[i].orderGroupId.#PCDATA == "1")
		{
			 universalServiceIDNameOfCodingSystem1 =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.NameOfCodingSystem = "LN";
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.1" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			universalServiceIDIdentifier2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.Identifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.2" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			universalServiceIDText2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-4.3" && in.MessageElement[i].orderGroupId.#PCDATA == "2")
		{
			universalServiceIDNameOfCodingSystem2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-7.0")
		{
			observationDateTime=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			//MapStringToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ObservationDateTime.Time );
			OBR7=in.MessageElement[i].hl7SegmentField.#PCDATA;	 
			OBR7DataType= in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;
			OBR7QuestionDataTypeNND=in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;
			MapToTSDataType( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, "", OBR7, 
				messageType,  OBR7DataType,  out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ObservationDateTime.Time );	 

//			MapStringFieldToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ObservationDateTime.Time );
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-22.0")
		{
			resultStatusChgTime=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			OBR22=in.MessageElement[i].hl7SegmentField.#PCDATA;
			OBR22DataType= in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;

			//MapStringToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ResultsRptStatusChngDateTime.Time );
			MapToTSDataType( 
				in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, 
				"", 
				OBR22, 
				messageType, 
				in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, 
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ResultsRptStatusChngDateTime.Time);	 

//			MapStringToDTM( in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ResultsRptStatusChngDateTime.Time );
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-25.0")
		{
			//Create for both OrderGroups	
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ResultStatus = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
//			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ResultStatus = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
		}
		if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBR-31.0")
		{
			
			
			string conditionCode=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			string mappedConditionCode="";
			string conceptCode="";
			boolean checkMappingAtProfile = RhapsodyTableLookup(pPHINService,"Service_Action_Pair", "Service", pPHINService,"Message_Profile_Id", messageType, "STATUS_CODE", "ACTIVE");
			boolean checkMappingAction = RhapsodyTableLookup(pPHINAction,"Service_Action_Pair",  "Action", pPHINAction, "Message_Profile_Id", messageType, "STATUS_CODE", "ACTIVE");
			boolean checkMappingCondition = RhapsodyTableLookup(mappedConditionCode,"Service_Action_Pair", "Condition_code", conditionCode, "Service", pPHINService,"Message_Profile_Id", messageType, "STATUS_CODE", "ACTIVE");
			boolean conceptCodeCheck = RhapsodyTableLookup(conceptCode,"Service_Action_Pair",  "CONCEPT_code", "NOT_FOUND", "Message_Profile_Id", messageType, "Condition_code", conditionCode, "STATUS_CODE", "ACTIVE");
				
			
				
			if( !checkMappingAtProfile || !checkMappingAction){
				mappingERROR="ERROR: There is no default SERVICE/ACTION pair defined in the SERVICE_ACTION_PAIR lookup for "+entityIdentifier2+" "+nndmessageVersion+", which has a message profile ID of " +messageType +" and condition Code of "+ conditionCode;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].Identifier = conditionCode;
			}else if(mappedConditionCode!="" && conceptCode=="" ){
				mappingERROR="ERROR: There is no default CONCEPT_CODE defined in the SERVICE_ACTION_PAIR lookup for "+entityIdentifier2+" "+nndmessageVersion+", which has a message profile ID " +messageType +". Please populate CONCEPT_CODE column for the condition code";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].Identifier = conditionCode;
			}else if(conceptCodeCheck ){
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].Identifier = conceptCode;
			}else{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].Identifier =conditionCode ;
			}
			
			
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].Text = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].NameOfCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].AlternateIdentifier = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].AlternateText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ReasonForStudy[0].NameOfAlternateCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
			reasonForStudyIdentifier2= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
			reasonForStudyText2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			reasonForStudyNameOfCodingSystem2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
			reasonForStudyAlternateIdentifier2= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
			reasonForStudyAlternateText2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
			reasonForStudyNameOfAlternateCodingSystem2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
		}
		if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "STD300"){
				std300=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				if(StrSize(std300)>0){
					std300=StrReplace(std300, "\\", "\\E\\");
					std300=StrReplace(std300, "|", "\\F\\");
					std300=StrReplace(std300, "~", "\\R\\");
					std300=StrReplace(std300, "^", "\\S\\");
					std300=StrReplace(std300, "&", "\\T\\");
				}
				
		}
		else if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "NBS246"){
			if(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA!="C"){
				NBS246observationSubID = in.MessageElement[i].observationSubID.#PCDATA;
			}else{
				NBS246observationSubID = "";
			}
		}
		////////////HCW specific code
		else if(in.MessageElement[i].questionIdentifierNND.#PCDATA=="223366009" && genericMMGV20){
			if(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA=="Y"){
				hcw= "; HCWYes";
			}
			if(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA=="N"){
				hcw= "; HCWNo";
			}
			if(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA=="UNK"){
				hcw= "; HCWUnknown";
			}	
			if(hcwTextBeforeCodedInd){
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[hcwObxOrderGroupId].OBX[hcwObxInc].ObservationValue[hcwObx5ValueInc] 
					=out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[hcwObxOrderGroupId].OBX[hcwObxInc].ObservationValue[hcwObx5ValueInc]++hcw;
			}
			else{
				int obxOrderGroupId = 0;
				int obxInc = 1;
				//Get next incrementor for OBX segment and initialize correct OrderGroupId
				if (in.MessageElement[i].orderGroupId.#PCDATA == "1") {
					obxInc = obx1Inc;
					obxOrderGroupId = 0;
				}
				else {
					obxInc = obx2Inc;
					obxOrderGroupId = 1;
				}
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].SetID = obx2Inc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ValueType ="TX";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier="77999-1";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem= "2.16.840.1.113883.6.1";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text="Comment";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier="INV886";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText="Notification Comments to CDC";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] =hcw;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
				obx2Inc=obx2Inc+1;
			}	
		}
		//STD Specific code for combining STD121
		else if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "STD121")
		{
			if(in.MessageElement[i].observationSubID.#PCDATA==NBS246observationSubID){
				//do nothing
			}
			else{
				if (std121ObxInc==-1)			
				{
					if (in.MessageElement[i].orderGroupId.#PCDATA == "1") 
					{
						std121ObxInc = obx1Inc;
						std121obxOrderGroupId = 0;
						obx1Inc=obx1Inc+1;
					}
					else {
						std121ObxInc = obx2Inc;
						std121obxOrderGroupId = 1;
						obx2Inc=obx2Inc+1;
					}	
				}
		
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].SetID = std121ObxInc + 1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ValueType = "CWE";
			
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.Identifier = in.MessageElement[i].questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.Text = in.MessageElement[i].questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.NameOfCodingSystem = in.MessageElement[i].questionOID.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.AlternateIdentifier = in.MessageElement[i].questionIdentifier.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.AlternateText = in.MessageElement[i].questionLabel.#PCDATA;
				//Literal value "L" specified in messaging spec as ALWAYS being sent here
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationIdentifier.NameOfAlternateCodingSystem = "L";
				//Both values are being used to set ObservationSubID, but make the ObservationSubID coming from NBS take precedence
				if (exists(in.MessageElement[i].observationSubID.#PCDATA))
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationSubID = in.MessageElement[i].observationSubID.#PCDATA;
				else if (exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA))
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationSubID = in.MessageElement[i].questionGroupSeqNbr.#PCDATA;
				
				std121ObsValue = std121ObsValue + 1;
				string codedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
					codedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
				string codedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
					codedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
				string codedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
					codedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
				string localCodedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
					localCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
				string localCodedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
					localCodedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
				string localCodedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
					localCodedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
				string originalOtherText = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA))
					originalOtherText = "^^^" + in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
			
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationValue[std121ObsValue] = 
					 codedValue + "^" +
					 codedValueDescription + "^" +
					 codedValueCodingSystem + "^" +
					 localCodedValue + "^" +
					 localCodedValueDescription + "^" +
					 localCodedValueCodingSystem + 
					 originalOtherText;				
					
				//Literal value "F" specified in messaging spec as ALWAYS being sent here
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[std121obxOrderGroupId].OBX[std121ObxInc].ObservationResultStatus = "F";
				}									
		}else if(StrFind(in.MessageElement[i].indicatorCd.#PCDATA, "ParentRepeatBlock")>-1){
			MapToDynamincParentRptToRpt(in.MessageElement[i], obx2Inc,messageType, out.PATIENT_RESULT.ORDER_OBSERVATION[0]);
	   }else if(StrFind(in.MessageElement[i].indicatorCd.#PCDATA, "DiscAsRepeat")>-1){
			MapToDynamicRootlDiscToRepeat(in.MessageElement[i], obx2Inc, out.PATIENT_RESULT.ORDER_OBSERVATION[0]);
	   }else if(StrFind(in.MessageElement[i].indicatorCd.#PCDATA, "DiscCdToMultiOBS")>-1){
			MapToDisRepeat(in.MessageElement[i], obx2Inc, out.PATIENT_RESULT.ORDER_OBSERVATION[0]);
	   }else if(StrFind(in.MessageElement[i].indicatorCd.#PCDATA, "RepeatToMultiNND")>-1){
			MapToRepeatToMultiNND(in.MessageElement[i], obx2Inc, out.PATIENT_RESULT.ORDER_OBSERVATION[0]);
	   }else if ((in.MessageElement[i].hl7SegmentField.#PCDATA == "OBX-3.0" || in.MessageElement[i].hl7SegmentField.#PCDATA == "OBX-5.9" )&&  StrFind(in.MessageElement[i].questionMap.#PCDATA, "|") > 0){
				MapToQuestionMap(in.MessageElement[i], obx2Inc, out.PATIENT_RESULT.ORDER_OBSERVATION[0]);
		}else if (in.MessageElement[i].hl7SegmentField.#PCDATA == "OBX-3.0")
		{
			int obxOrderGroupId = 0;
			int obxInc = 1;
			int obx5ValueInc = 0;
			string obx5ObservationSubID = null;
			boolean obxFound = false;

			string a =  in.MessageElement[i].questionIdentifierNND.#PCDATA;
			
			if( StrRegFind(messageType,"CongenitalSyphilis_MMG_V1.0")>-1 && ( in.MessageElement[i].questionIdentifier.#PCDATA=="LAB588_MTH"
				|| in.MessageElement[i].questionIdentifier.#PCDATA=="INV290_MTH" || in.MessageElement[i].questionIdentifier.#PCDATA=="INV291_MTH"
				|| in.MessageElement[i].questionIdentifier.#PCDATA=="STD123_MTH" || in.MessageElement[i].questionIdentifier.#PCDATA=="LAB167_MTH")){
					int count =StrToInt(in.MessageElement[i].observationSubID.#PCDATA);
					
					if(count >dupRepeatCongenitalCounter)
						dupRepeatCongenitalCounter = count;
			}else if(in.MessageElement[i].questionIdentifierNND.#PCDATA=="INV290"
			|| in.MessageElement[i].questionIdentifierNND.#PCDATA=="INV291"){
				inv290Inv291Counter =StrToInt(in.MessageElement[i].observationSubID.#PCDATA);
			}

			
			//Get next incrementor for OBX segment and initialize correct OrderGroupId
			if (in.MessageElement[i].orderGroupId.#PCDATA == "1") {
				obxInc = obx1Inc;
				obxOrderGroupId = 0;
			}
			else {
				obxInc = obx2Inc;
				obxOrderGroupId = 1;
			}
			maxObr = obxOrderGroupId;
			maxObx = obxInc+1;
			
			
		
				
			//Need to check if it is a repeating element
			for(int x=0;x<sizeof(obxRepeatingElementArray[*]); x=x+1 )
			{
				if(in.MessageElement[i].questionIdentifierNND.#PCDATA=="INV290" || in.MessageElement[i].questionIdentifierNND.#PCDATA=="INV291"){
					obxFound= false;
				}
				else if (obxRepeatingElementArray[x].elementUID == in.MessageElement[i].questionIdentifierNND.#PCDATA) {
					if ( exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA) && exists(in.MessageElement[i].observationSubID.#PCDATA) ) {
						if (obxRepeatingElementArray[x].questionGroupSeqNbr == in.MessageElement[i].questionGroupSeqNbr.#PCDATA && obxRepeatingElementArray[x].observationSubID == in.MessageElement[i].observationSubID.#PCDATA) {
							obxFound = true;
						}
					} else if ( !exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA) && exists(in.MessageElement[i].observationSubID.#PCDATA) ) {
						if (obxRepeatingElementArray[x].questionGroupSeqNbr == null && obxRepeatingElementArray[x].observationSubID == in.MessageElement[i].observationSubID.#PCDATA) {
							obxFound = true;
						}
					} else if ( exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA) && !exists(in.MessageElement[i].observationSubID.#PCDATA) ) {
						if (obxRepeatingElementArray[x].questionGroupSeqNbr == in.MessageElement[i].questionGroupSeqNbr.#PCDATA && obxRepeatingElementArray[x].observationSubID == null) {
							obxFound = true;
						}
					} else if ( !exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA) && !exists(in.MessageElement[i].observationSubID.#PCDATA) ) {
						obxFound = true;
					}
					
					//HEP Specific code for repeating INV826/INV827 
					if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "INV826" ||
						in.MessageElement[i].questionIdentifierNND.#PCDATA == "INV827")
					{
						obxFound = false;
					}
					
					if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV826b" ||
						in.MessageElement[i].questionIdentifier.#PCDATA == "INV827b")
					{
						obxFound = false;
					}
				
					if (obxFound)
					{
						//We found existing element, so this is a repeating obx value
						//Need to increment the valueIncrementor and retrieve the obx incrementor
						obxRepeatingElementArray[x].valueInc = obxRepeatingElementArray[x].valueInc + 1;
						obx5ValueInc = obxRepeatingElementArray[x].valueInc;
						obxInc = obxRepeatingElementArray[x].obxInc;
						obx5ObservationSubID = obxRepeatingElementArray[x].observationSubID;
					}
				}
			}


			if (!obxFound)
			{
				//Need to insert this NNDUID into array 
				//Add NND UID, set value incrementor to 0 and store current obxInc
				obxRepeatingElement newElement = obxRepeatingElementArray[+];
				newElement.elementUID = in.MessageElement[i].questionIdentifierNND.#PCDATA;
				if (exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA)) {
					newElement.questionGroupSeqNbr = in.MessageElement[i].questionGroupSeqNbr.#PCDATA;
				} else {
					newElement.questionGroupSeqNbr = null;
				}
				if (exists(in.MessageElement[i].observationSubID.#PCDATA)) {
					newElement.observationSubID = in.MessageElement[i].observationSubID.#PCDATA;
				} else {
					newElement.observationSubID = null;
				}
				newElement.valueInc = 0;
				newElement.obxInc = obxInc;
			}
			/* This code will cover the situation with TB investigation where value is based off of question_identifer='INV121' and
			   question_identifier_nnd='INV177' and it is populated from frontend.*/
			if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "INV177") 
			{
				inv177Found = true;
			} 

			if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV111" ||
					 in.MessageElement[i].questionIdentifier.#PCDATA == "INV120" ||
					 in.MessageElement[i].questionIdentifier.#PCDATA == "INV121" ) 
			{
				//Since INV111 is of datatype DT
			if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV111" && in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA== "DT") {
				newDate = StrLeft(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,4) +
						  StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,5,2) +
						  StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,8,2);
			} 
				//Since INV120 and INV121 is of datatype TS
			else
			{
				newDate = StrLeft(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA,4) +
						  StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA,5,2) +
						  StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA,8,2);
			}
				//MapToTSAndDTTypeString(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, in.MessageElement[i].questionIdentifierNND.#PCDATA, in.MessageElement[i].hl7SegmentField.#PCDATA, messageType, in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, newDate);	 
					
				if (StrSize(inv177Date)==0 || StrToDbl(newDate) < StrToDbl(inv177Date)) {
					inv177Date = newDate;
				}

			}
			
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID = obxInc+1;

			
			if (exists(in.MessageElement[i].observationSubID)) 
			{
			trace( "NND/SubID: " + in.MessageElement[i].questionIdentifierNND.#PCDATA +"/"+  in.MessageElement[i].observationSubID.#PCDATA);
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = in.MessageElement[i].observationSubID.#PCDATA;
			}

			
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "SN_WITH_UNIT")
			{
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ValueType = "SN";
			}
			else
			{
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ValueType = in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;
			}

			if (!obxFound) {
				//Map the Question elements
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier = in.MessageElement[i].questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text = in.MessageElement[i].questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem = in.MessageElement[i].questionOID.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier = in.MessageElement[i].questionIdentifier.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = in.MessageElement[i].questionLabel.#PCDATA;
				//Literal value "L" specified in messaging spec as ALWAYS being sent here
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem = "L";
				//Both values are being used to set ObservationSubID, but make the ObservationSubID coming from NBS take precedence
				if( StrRegFind(messageType,"CongenitalSyphilis_MMG_V1.0")>-1 && ( in.MessageElement[i].questionIdentifier.#PCDATA=="LAB588"
				|| in.MessageElement[i].questionIdentifier.#PCDATA=="INV290" || in.MessageElement[i].questionIdentifier.#PCDATA=="INV291"
				|| in.MessageElement[i].questionIdentifier.#PCDATA=="STD123" || in.MessageElement[i].questionIdentifier.#PCDATA=="LAB167"
				|| in.MessageElement[i].questionIdentifier.#PCDATA=="STD123_1" )){
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = "-"+ in.MessageElement[i].observationSubID.#PCDATA;
				}else if (exists(in.MessageElement[i].observationSubID.#PCDATA))
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = in.MessageElement[i].observationSubID.#PCDATA;
				else if (exists(in.MessageElement[i].questionGroupSeqNbr.#PCDATA))
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = in.MessageElement[i].questionGroupSeqNbr.#PCDATA;
			}
				
			//XPN datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "XPN")
			{
				string comparator = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA))
					comparator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA;

				string num1 = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA))
					num1 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA;

				string separatorSuffix = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA))
					separatorSuffix = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA;

				string num2 = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA))
					num2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
					comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
			}

			//XTN datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "XTN")
			{
				string telecommunicationUseCode = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationUseCode.#PCDATA))
					telecommunicationUseCode = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationUseCode.#PCDATA;

				string telecommunicationEquipmentType = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationEquipmentType.#PCDATA))
					telecommunicationEquipmentType = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationEquipmentType.#PCDATA;

				string emailAddress = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.emailAddress.#PCDATA))
					emailAddress = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.emailAddress.#PCDATA;

				string areaOrCityCode = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.areaOrCityCode.#PCDATA))
					areaOrCityCode = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.areaOrCityCode.#PCDATA;

				string phoneNumber = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.phoneNumber.#PCDATA))
					phoneNumber = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xtnDataType.phoneNumber.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
					"^" + telecommunicationUseCode + "^" + telecommunicationEquipmentType + "^" + emailAddress + "^^" + areaOrCityCode +"^" + phoneNumber;
			}
						
			//XPN datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "XPN")
			{
				string familyName = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xpnDataType.familyName.#PCDATA))
					familyName = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xpnDataType.familyName.#PCDATA;

				string givenName = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xpnDataType.givenName.#PCDATA))
					givenName = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.xpnDataType.givenName.#PCDATA;


				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
					familyName + "^" + givenName;
			}
			
			//SN datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "SN")
			{
				string comparator = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA))
					comparator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA;

				string num1 = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA))
					num1 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA;

				string separatorSuffix = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA))
					separatorSuffix = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA;

				string num2 = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA))
					num2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
					comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
				
				//HEP Specific code for repeating INV826/INV827 and 11920_8/1742_6
				if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "INV827" ||
					in.MessageElement[i].questionIdentifier.#PCDATA == "1742_6" ) 
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = "1"; 
				}
				
				if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV827b" ||
					in.MessageElement[i].questionIdentifier.#PCDATA == "11920_8" ) 
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = "2"; 
				}
										
			}
			
			//SN datatype with unit
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "SN_WITH_UNIT")
			{
				string comparator = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.comparator.#PCDATA))
					comparator = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.comparator.#PCDATA;

				string num1 = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.num1.#PCDATA))
					num1 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.num1.#PCDATA;

				string separatorSuffix = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.separatorSuffix.#PCDATA))
					separatorSuffix = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.separatorSuffix.#PCDATA;

				string num2 = ""; 
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.num2.#PCDATA))
					num2 = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.num2.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
					comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
					
				string codedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValue.#PCDATA))
					codedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValue.#PCDATA;
				string codedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueDescription.#PCDATA))
					codedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueDescription.#PCDATA;
				string codedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueCodingSystem.#PCDATA))
					codedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueCodingSystem.#PCDATA;
				string localCodedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValue.#PCDATA))
					localCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValue.#PCDATA;
				string localCodedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueDescription.#PCDATA))
					localCodedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueDescription.#PCDATA;
				string localCodedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueCodingSystem.#PCDATA))
					localCodedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueCodingSystem.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.Identifier = codedValue;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.Text = codedValueDescription;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.NameOfCodingSystem = codedValueCodingSystem;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.AlternateIdentifier = localCodedValue;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.AlternateText = localCodedValueDescription;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].Units.NameOfAlternateCodingSystem = localCodedValueCodingSystem;
			}
			if((StrRegFind(messageType,"Measles_MMG_V1.0")>-1 ||  StrRegFind(messageType,"Rubella_MMG_V1.0")>-1 || StrRegFind(messageType,"CRS_MMG_V1.0")>-1 ||  StrRegFind(messageType,"Varicella_MMG_V3.0")>-1 || StrRegFind(messageType,"Pertussis_MMG_V1.0")>-1 || StrRegFind(messageType,"Mumps_MMG_V1.0")>-1) && (in.MessageElement[i].questionIdentifierNND.#PCDATA=="LAB143" || 
				(in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA=="CX" && StrSize(in.MessageElement[i].questionMap.#PCDATA)>0))){
						MapToSpCXType(in.MessageElement[i], obx2Inc,  STData, CXData,obxOrderGroupId,out);
						//obxFound = true;
			}
			//ST datatype
			else if ((StrRegFind(messageType,"Arbo_Case_Map_v1.0")>-1) && in.MessageElement[i].questionIdentifier.#PCDATA == "INV173" && in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "ST")
			{
				//string stringData = out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].FillerOrderNumber.EntityIdentifier;
				string stringData = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				isDefaultNull= false;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = stringData;
			}
			else if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "ST")
			{
				string stringData = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = stringData;				
			}
			
			//TX datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "TX")
			{
				string textData = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.txDataType.textData.#PCDATA;
				textData = StrReplace(textData, "\n", " ");
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = textData;	
				if(in.MessageElement[i].questionIdentifierNND.#PCDATA=="77999-1" && genericMMGV20){
					textData =textData+hcw;	
					hcwObxInc=obxInc;
					hcwObxOrderGroupId=obxOrderGroupId;
					hcwObx5ValueInc=obx5ValueInc;
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =textData;
					hcwTextBeforeCodedInd=true;
				}			
			}
			
			//ID datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "ID")
			{
				string idCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = idCodedValue;				

			}
			//IS datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "IS")
			{
				string isCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = isCodedValue;
			}	
							
			//CWE datatype
			
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "CWE")
			{
				string codedValue = "";
				string questionIdentifier =in.MessageElement[i].questionIdentifierNND.#PCDATA;
				
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
					codedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
				string codedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
					codedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
				string codedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
					codedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
				string localCodedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
					localCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
				string localCodedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
					localCodedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
				string localCodedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
					localCodedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
				string originalText = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA))
					originalText = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
					if(StrSize(originalText)>0){
						originalText=StrReplace(originalText, "\\", "\\E\\");
						originalText=StrReplace(originalText, "|", "\\F\\");
						originalText=StrReplace(originalText, "~", "\\R\\");
						originalText=StrReplace(originalText, "^", "\\S\\");
						originalText=StrReplace(originalText, "&", "\\T\\");
					}
				if( StrRegFind(messageType,"Arbo_Case_Map_v1.0")>-1 || StrRegFind(messageType,"Gen_Case_Map_v1.0")>-1 || StrRegFind(messageType,"TB_Case_Map_v2.0")>-1 || 
					StrRegFind(messageType,"Var_Case_Map_v2.0")>-1){
					if(StrSize(codedValue)==0){
						out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = "^^^^"+localCodedValueDescription;
					}else{
						out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = 
							 codedValue + "^" +
							 codedValueDescription + "^" +
							codedValueCodingSystem + "^" +
							originalText;
					}
		
				}else{
					if(StrSize(codedValue)==0){
						if(StrSize(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA)==0){
							string codedvalueDescription=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
							if(StrSize(codedvalueDescription)>0){
								codedvalueDescription=StrReplace(codedvalueDescription, "\\", "\\E\\");
								codedvalueDescription=StrReplace(codedvalueDescription, "|", "\\F\\");
								codedvalueDescription=StrReplace(codedvalueDescription, "~", "\\R\\");
								codedvalueDescription=StrReplace(codedvalueDescription, "^", "\\S\\");
								codedvalueDescription=StrReplace(codedvalueDescription, "&", "\\T\\");							
							}
							out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = 
							 "^^^^^^^^"+codedvalueDescription;
							
						}else if(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA=="OTH") {
							out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = 
							in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA + "^" +in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA + "^" +
							 in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA +
							 "^^^^^^"+ originalText;
						}else{
							out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = 
							+in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA+"^" +in.MessageElement[i].dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA + "^L^^^^^^"+ originalText;
						}
				
					}else{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =codedValue + "^" +
						 codedValueDescription + "^" +
						 codedValueCodingSystem + "^" +
						 localCodedValue + "^" +
						 localCodedValueDescription + "^" +
						 localCodedValueCodingSystem + "^^^" +
						  originalText;
					}
				}	
					
			}
			
			//CE datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "CE")
			{
				string codedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA))
					codedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
				string codedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA))
					codedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
				string codedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA))
					codedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
				string localCodedValue = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA))
					localCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
				string localCodedValueDescription = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA))
					localCodedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
				string localCodedValueCodingSystem = "";
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA))
					localCodedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = 
					 codedValue + "^" +
					 codedValueDescription + "^" +
					 codedValueCodingSystem + "^" +
					 localCodedValue + "^" +
					 localCodedValueDescription + "^" +
					 localCodedValueCodingSystem;
			}

			//DT datatype
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "DT" && INV162RepeatIndicator && in.MessageElement[i].questionIdentifier.#PCDATA == "INV162"){
				//do nothing as this is a repeat date and we keep only the first date
			}else if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "DT")
			{
				if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV162"){
					INV162RepeatIndicator= true;
				}
				if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.year))
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
						in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.year.#PCDATA;
				}
				else 
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] =
						StrLeft(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,4) +
						StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,5,2) +
						StrMid(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA,8,2);
				}

			//HEP Specific code for repeating INV826/INV827
			if (in.MessageElement[i].questionIdentifierNND.#PCDATA == "INV826")
			{
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = "1"; 
			}
			
			if (in.MessageElement[i].questionIdentifier.#PCDATA == "INV826b")
			{
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = "2"; 
			}
				
		}
		
		//TS datatype
		if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "TS")
		{
			string timeOutput="";
			
		if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.year))
		{
			MapToTSAndDTTypeString(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.year.#PCDATA, in.MessageElement[i].questionIdentifierNND.#PCDATA, in.MessageElement[i].hl7SegmentField.#PCDATA, 
				messageType, in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA,timeOutput);	
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc]=timeOutput;
		 } else{
			MapToTSAndDTTypeString(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, in.MessageElement[i].questionIdentifierNND.#PCDATA, in.MessageElement[i].hl7SegmentField.#PCDATA, 
				messageType, in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA, timeOutput);	
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc]=timeOutput;

		 }	
		}
		
		//NM datatype
		if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "NM")
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[obx5ValueInc] = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.nmDataType.num.#PCDATA;				
		
		//Literal value "F" specified in messaging spec as ALWAYS being sent here
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationResultStatus = "F";

		if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="2653"	||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="3304"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="6816"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="N0000166993"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1160"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1166"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1167"
			||out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1308"
			 )
		{
			drugCounter= drugCounter+1;
			string codedText="";

			string observationValue = out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0];
			if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="2653"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Cocaine^2.16.840.1.113883.6.88";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="3304"){
				codedText=out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Heroin^2.16.840.1.113883.6.88";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			
			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="6816"){
				codedText=out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Methamphetamines^2.16.840.1.113883.6.88";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;

			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="N0000166993"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Crack^2.16.840.1.113883.3.26.1.5";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1160"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Erectile dysfunction medications (e.g., Viagra)^2.16.840.1.114222.4.5.274";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;

			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1166"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Nitrates/Poppers^2.16.840.1.114222.4.5.274";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1167"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^No drug use reported^2.16.840.1.114222.4.5.274";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier=="PHC1308"){
				codedText =out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier+"^Other Drugs Used^2.16.840.1.114222.4.5.274";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=codedText;
			}
	
			
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID="2";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier="STD115";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text="Drugs Used";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem="2.16.840.1.114222.4.5.232";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier="STD115";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText="Drugs Used";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID=IntToStr(drugCounter);

			obxInc =obxInc+1;
			obx2Inc=obx2Inc+1;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ValueType="CWE";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID = obxInc+1;
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID=IntToStr(drugCounter);
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=observationValue;
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0]=observationValue+"^"+ codedText;
		
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier="STD116";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text="Drugs Used Indicator";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem="2.16.840.1.114222.4.5.232";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier="STD116";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText="Drugs Used Indicator";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[maxObx].ObservationResultStatus = "F";
			//obxFound = true;
		
		}
		

		//Increment for next OBX segment if this wasn't a repeating element
		if (!obxFound) 
		{
			if (in.MessageElement[i].orderGroupId.#PCDATA == "1")
				obx1Inc=obx1Inc+1;
			else
				obx2Inc=obx2Inc+1;
		}
		
	} //End of OBX 3.0

	
	
	if((StrRegFind(messageType,"Arbo_Case_Map_v1.0")>-1) && isDefaultNull  && StrSize(stateLocalId) >0){
	
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].SetID=maxObx+1;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ValueType="ST";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.Identifier="INV173";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.Text="State Case ID";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.NameOfCodingSystem="2.16.840.1.114222.4.5.232";
		
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.AlternateIdentifier="INV173";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.AlternateText="State Case ID";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationIdentifier.NameOfAlternateCodingSystem="L";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationValue[0]=stateLocalId;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[maxObr].OBX[maxObx].ObservationResultStatus = "F";

	}else{
		//do nothing
	} //End of MessageElement[] iteration
	
	/* This code will cover the situation outside TB investigation (In TB question_identifer='INV121' 
	   and question_identifier_nnd='INV177' and question is populated from frontend) 
	   where INV177 is not in the intermediate message, this is applicable to only V2 Pages. Excludes Arbo, Gen V1, varicella*/
	   
	if (inv177Found != true && StrSize(inv177Date) > 0 && StrRFind("TB_Case_Map_v2.0", messageType)< 0 && StrRFind("Arbo_Case_Map_v1.0", messageType)< 0 && StrRFind("Gen_Case_Map_v1.0", messageType)< 0 && StrRFind("Var_Case_Map_v2.0", messageType)< 0)
	{
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].SetID = obx2Inc+1;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ValueType = "DT";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier = "77970-2";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text = "Date First Reported PHD";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem = "2.16.840.1.113883.6.1";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier = "INV177";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText = "Date First Reported PHD";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem = "L";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = inv177Date;	
	}
	/*This code should execute for Gen V1 guides, exculdes varicella and Arbo*/
	if (inv177Found != true && StrSize(inv177Date) > 0 && StrRFind("Gen_Case_Map_v1.0", messageType)==0)	
	{
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].SetID = obx2Inc+1;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ValueType = "TS";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier = "INV177";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text = "Date First Reported PHD";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem = "2.16.840.1.114222.4.5.232";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier = "INV177";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText = "Date First Reported PHD";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem = "L";
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = inv177Date+"000000.000";//for TS18 format
	}
	
	if(isSingleGuide){
		out.MSH.MessageProfileIdentifier[1].EntityIdentifier = val21;
		out.MSH.MessageProfileIdentifier[1].NamespaceID = val22;
		out.MSH.MessageProfileIdentifier[1].UniversalID =val23;
		out.MSH.MessageProfileIdentifier[1].UniversalIDType =val24;
	}else{
		out.MSH.MessageProfileIdentifier[1].EntityIdentifier = val11;
		out.MSH.MessageProfileIdentifier[1].NamespaceID = val12;
		out.MSH.MessageProfileIdentifier[1].UniversalID =val13;
		out.MSH.MessageProfileIdentifier[1].UniversalIDType =val14;
	
		out.MSH.MessageProfileIdentifier[2].EntityIdentifier = val21;
		out.MSH.MessageProfileIdentifier[2].NamespaceID = val22;
		out.MSH.MessageProfileIdentifier[2].UniversalID =val23;
		out.MSH.MessageProfileIdentifier[2].UniversalIDType =val24;
	}
	
	if(StrRFind("NND_ORU_v2.0", nndmessageVersion)==0){
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].SetID = 2;
		/*if (inv177Found != true && StrSize(inv177Date) > 0)
			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[inv177ObxNbr].ValueType = "TS";*/
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.EntityIdentifier =entityIdentifier2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.NamespaceID =fillerOrderNumberNamespaceID2;	
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.UniversalID = fillerOrderNumberUniversalID2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].FillerOrderNumber.UniversalIDType = fillerOrderNumberUniversalIDType2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.Identifier = universalServiceIDIdentifier1 ;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.Text = universalServiceIDText1 ;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].UniversalServiceID.NameOfCodingSystem = universalServiceIDNameOfCodingSystem1 ;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.Identifier = universalServiceIDIdentifier2; 
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.Text = universalServiceIDText2; 
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].UniversalServiceID.NameOfCodingSystem =universalServiceIDNameOfCodingSystem2;

		MapToTSDataType(observationDateTime, "", OBR7, 
				messageType, OBR7DataType, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ObservationDateTime.Time );	 

		MapToTSDataType(resultStatusChgTime, "", OBR22, 
				messageType, OBR7DataType, out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ResultsRptStatusChngDateTime.Time);	 
			
				
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ResultStatus = out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[0].ResultStatus;

		
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].Identifier = reasonForStudyIdentifier2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].Text = reasonForStudyText2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].NameOfCodingSystem = reasonForStudyNameOfCodingSystem2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].AlternateIdentifier = reasonForStudyAlternateIdentifier2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].AlternateText =reasonForStudyAlternateText2;
		out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBR[1].ReasonForStudy[0].NameOfAlternateCodingSystem =reasonForStudyNameOfAlternateCodingSystem2;

	}
	MapToTSDataType( currentTime, "", "MSH-7", messageType,  OBR7DataType,  out.MSH.DateTimeOfMessage.Time );	 						
	
	
	}
	int	labObrCounter = 1;
	EIElement eiType;	
	
	ParentLink  parentLink;
	string cachedOBX3data = "";

    for(int i=0;i<sizeof(in.LabReportEvent[*]); i=i+1)
	{
		int obrCounter = sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[*]);
		labObrCounter = obrCounter+1;
		int obxSubidCounter = 1;
		MapLabReportEventToOBR(in.LabReportEvent[i], obrCounter, labObrCounter, messageType,0,eiType,parentLink,obxSubidCounter, cachedOBX3data,out);

	}
	
		for(int l=0;l<sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[*]); l=l+1 ){
		
		for(int j=0;j<sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[*]); j=j+1 ){
			
			for(int k=0;k<sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[*]); k=k+1 ){
			
				if( StrRegFind(messageType,"CongenitalSyphilis_MMG_V1.0")>-1 && ( out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="LAB588"
					|| out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="INV290" || out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="INV291"
					||out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD123" || out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="LAB167"
					|| out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD123_1"  )){
						int count =StrToInt( out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID);
						int subidCounter =StrToInt(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID);
						if(subidCounter<0){
							int newSubidCounter = -subidCounter;
							out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID=IntToStr(dupRepeatCongenitalCounter+ newSubidCounter);
						}
				
				}else{
					 if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD122"
					|| out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD123"
					|| out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD126") 
					{
						if(inv290Inv291Counter1==0){
								inv290Inv291Counter = inv290Inv291Counter +1;
								inv290Inv291Counter1 = inv290Inv291Counter ;
						}
							out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID = IntToStr(inv290Inv291Counter1);
					}
				
					else if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD124"
						|| out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.AlternateIdentifier=="STD125"
					 
					){
						if(inv290Inv291Counter2==0){
							inv290Inv291Counter = inv290Inv291Counter +1;
							inv290Inv291Counter2 =inv290Inv291Counter;
						}
							out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID = IntToStr(inv290Inv291Counter2);
					}
					else if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.Identifier=="STD121"){
						out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationSubID= "";
					}
				}
				
				if(StrRFind(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0], "Other Drugs Used^2.16.840.1.114222.4.5.274")>0 && StrSize(std300)>0){
					out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0] = out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0]+"^^^^^^"+std300;
				}
				else if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.Identifier =="67187-5" && StrRFind(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0], OTH_COMP_REPLACE)==0)
				{
					if(StrSize(OTH_COMP_TEXT)>0){
						out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0] = OTH_COMP_REPLACE+"^^^^^^"+OTH_COMP_TEXT;
					}else{
						out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0] = "OTH^other^2.16.840.1.113883.5.1008";
					}
					out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[1]="";
					
				}
				else if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.Identifier =="56831-1" && StrRFind(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0], OTH_SANDS_REPLACE)==0)
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0] = OTH_SANDS_REPLACE+"^^^^^^"+OTH_SANDS_TEXT;
					out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[1]="";
					
				}else if(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationIdentifier.Identifier =="56831-1" && StrSize(out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[1])>0)
				{
					//out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[0] = OTH_SANDS_REPLACE+"^^^^^^"+OTH_SANDS_TEXT;
					out.PATIENT_RESULT.ORDER_OBSERVATION[l].OBSERVATION[j].OBX[k].ObservationValue[1]="";
					
				}
			}
				
		}
	}
}


map MapToTSDataType( <- string in, <- string questionIdentifier, <- string hl7segField, <- string mmgVersion, <- string inputDataType, -> Output::DTM out )
{
	boolean result =false; 
	string outputDataType="";
	if(inputDataType == "DT")
		outputDataType = "DT8";
	if(inputDataType == "TS")
		outputDataType = "TS18";

	boolean questionIdRequired =false; 
		
	if(StrRFind("OBX-3.0", hl7segField)==0){	
		questionIdRequired = true;
	}
	string mappedDataType="";
	if(!questionIdRequired && StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		 result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;										
	}else if(questionIdRequired && StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		 result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}else if(!questionIdRequired && !result  && 	StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	else if(!questionIdRequired && !result  && 	StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND",
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	else if(!questionIdRequired &&  StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND", "HL7_SEGMENT_FIELD",hl7segField, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}

	
	int stringSize=StrSize(in);
	out.Year = StrToInt(StrLeft(in,4));
	boolean matchfound= false;
	if(outputDataType=="DT4" || outputDataType=="TS4" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<7){
			out.Month=00;	
		}else{
			out.Month = StrToInt(StrMid(in,5,2));
		}
	}
	if(outputDataType=="DT6" || outputDataType=="TS6" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<10){
			out.Day = 00;	
		}else{
		out.Day = StrToInt(StrMid(in,8,2));
		}
	}
	if(outputDataType=="DT8" || outputDataType=="TS8" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<13){
			out.Hours=00;	
		}else{
			out.Hours = StrToInt(StrMid(in,11,2));
		}
		
	}
	if(outputDataType=="TS10"){
		matchfound= true;
	}else if(!matchfound){
	
		if(stringSize<16){
			out.Minutes = 00;	
		}else{
			out.Minutes = StrToInt(StrMid(in,14,2));
		}
	}
	if(outputDataType=="TS12"){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<19){
		out.Seconds = 00;
		}else{
			out.Seconds = StrToInt(StrMid(in,17,2));
		}
	}
	if(outputDataType=="TS14"){
		matchfound= true;
	}
	
	if(outputDataType=="TS17"){
	
		if(stringSize<23){
			out.Millis =000;	
		}else{
			out.Millis  = StrToInt(StrMid(in,20,3));
		}
		matchfound= true;
	}
	if(outputDataType=="TS18"){
		if(stringSize<23){
			out.seperator=".";
			out.Millis=000;	
		}else{
			out.seperator=".";
			out.Millis= StrToInt(StrMid(in,20,3));
		}
	}

}


map MapToTSAndDTTypeString( <- string in, <- string questionIdentifier, <- string hl7segField, <- string mmgVersion, <- string inputDataType, -> string out )
{

	boolean result =false; 
	string outputDataType="";
	if(inputDataType == "DT")
		outputDataType = "DT8";
	if(inputDataType == "TS")
		outputDataType = "TS18";

	boolean questionIdRequired =false; 
		
	if(StrRFind("OBX-3.0", hl7segField)==0){	
		questionIdRequired = true;
	}
	
	string mappedDataType="";
	if(!questionIdRequired && StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		 result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}else if(questionIdRequired && StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		 result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	else if(!questionIdRequired && !result  && 	StrSize(StrTrim(questionIdentifier))>0 && StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND","QUESTION_IDENTIFIER",questionIdentifier, 
										"CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	else if(!questionIdRequired && !result  && 	StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(mmgVersion))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND",
										"HL7_SEGMENT_FIELD",hl7segField, "MMG_VERSION", mmgVersion, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	else if(!questionIdRequired &&  StrSize(StrTrim(hl7segField))>0 && StrSize(StrTrim(inputDataType))>0){
		result = RhapsodyTableLookup(mappedDataType,"DATA_TYPE_LOOKUP", "DATA_TYPE","NOT_FOUND", "HL7_SEGMENT_FIELD",hl7segField, "CORE_DATA_TYPE", inputDataType ); 
		if(mappedDataType!="NOT_FOUND")
			outputDataType=mappedDataType;
	}
	
	out=StrLeft(in,4);
	int stringSize=StrSize(in);
		
	boolean matchfound= false;
	if(outputDataType=="DT4" || outputDataType=="TS4" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<7){
			out=out+"00";	
		}else{
			string value = StrMid(in,5,2);
			out=out+value;
		}
	}
	if(outputDataType=="DT6" || outputDataType=="TS6" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<10){
			out=out+"00";	
		}else{
			string value = StrMid(in,8,2);
			out=out+value;
		}
	}
	if(outputDataType=="DT8" || outputDataType=="TS8" ){
		matchfound= true;
	}else if(!matchfound){
		if(stringSize<13){
			out=out+"00";	
		}else{
			string value = StrMid(in,11,2);
			out=out+value;
		}

	}
	
	if(outputDataType=="TS10"){
		matchfound= true;
	}else if(!matchfound){
		
		if(stringSize<16){
			out=out+"00";	
		}else{
			string value = StrMid(in,14,2);
			out=out+value;
		}

		
		
	}
	if(outputDataType=="TS12"){
		matchfound= true;
	}else if(!matchfound){
	if(stringSize<19){
			out=out+"00";	
		}else{
			string value = StrMid(in,17,2);
			out=out+value;
		}

	}
	
	if(outputDataType=="TS14"){
		matchfound= true;
	}
	
	
	if(outputDataType=="TS17"){
		matchfound= true;
		if(stringSize<24){
			out=out+"000";	
		}else{
			string value = StrMid(in,20,3);
			out=out+value;
		}
	}
	if(outputDataType=="TS18"){
		if(stringSize<24){
			out=out+".000";	
		}else{
			string value = StrMid(in,20,3);
			out=out+"."+value;
		}
	}
	
	

}


map MapToCEType( <- Input::MessageElement in, -> Output::CE out )
{
	if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType)){
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue))
		{
	    	out.Identifier=  in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
		}else{
			out.Identifier = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem))
		{
	    	out.NameOfCodingSystem=  in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
		}else{
			out.NameOfCodingSystem = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription))
		{
	    	out.Text=  in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
		}else{
			out.Text = "MISSING";
		}
	}
	
	if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType)){
	
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue))
		{
	    	out.Identifier=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
		}else{
			out.Identifier = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem))
		{
	    	out.NameOfCodingSystem=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
		}else{
			out.NameOfCodingSystem = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription))
		{
	    	out.Text=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
		}else{
			out.Text = "MISSING";
		}
		
	
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue))
		{
	    	out.AlternateIdentifier=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
		}else{
			out.AlternateIdentifier= "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem))
		{
	    	out.NameOfAlternateCodingSystem=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
		}else{
			out.NameOfAlternateCodingSystem= "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription))
		{
	    	out.AlternateText=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
		}else{
			out.AlternateText= "MISSING";
		}
	}

}


map MapToXADType( <- Input::MessageElement in, <- string locator, -> Output::XAD out )
{

if (locator=="1"){
	//out.StreetAddress = 
	}else if (locator=="2"){
	//out.OtherDesignation
	}else if (locator=="3"){
	//out.City
	}else if (locator=="4"){
		out.StateOrProvince =in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
	}else if (locator=="5"){
		out.ZipOrPostalCode=in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
	}else if (locator=="6"){
		out.Country=in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
	}else if (locator=="9"){
		out.CountyOrParishCode=in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
	}	
}



map MapToTSDayMonthYearType( <- Input::MessageElement in, -> Output::TS out )
{

	string time  =in.dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
		int stringSize=StrSize(time);
	out.Time.Year = StrToInt(StrLeft(time,4));
		if(stringSize<7){
			out.Time.Month=00;	
		}else{
			out.Time.Month = StrToInt(StrMid(time,5,2));
		}
		if(stringSize<10){
			out.Time.Day = 00;	
		}else{
		out.Time.Day = StrToInt(StrMid(time,8,2));
		}


}


map MapToNK1Element( <- Input::MessageElement in, -> int raceCounterNK1, <- string hl7Field, -> Output::NK1 out )
{
				
		if (StrLeft(hl7Field,4 )=="NK1-")
		{
			string dataElement= StrRemove(hl7Field, "NK1-");

			if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "2.")==0){
			}else if(StrRFind(dataElement, "3.")==0){
				MapToCEType(in,  out.Relationship);
			}else if(StrRFind(dataElement, "4.")==0){
				string dataLocator= StrRemove(dataElement, "4.");
				MapToXADType(in, dataLocator, out.Address);
			}else if(StrRFind(dataElement, "14.")==0){
				string dataLocator= StrRemove(dataElement, "14.");
				MapToCEType(in, out.MaritalStatus);
			}else if(StrRFind(dataElement, "16.")==0){
				string dataLocator= StrRemove(dataElement, "16.");
				MapToTSDayMonthYearType(in,  out.DateTimeOfBirth);
			}else if(StrRFind(dataElement, "28.")==0){
				string dataLocator= StrRemove(dataElement, "28.");
				MapToCEType(in, out.EthnicGroup);
			}else if(StrRFind(dataElement, "35.")==0){
				string dataLocator= StrRemove(dataElement, "35.");
				MapToCEType(in,  out.Race[raceCounterNK1]);
				raceCounterNK1 = raceCounterNK1+1;
			}
		}
	
}


map MapToSpCXType( <- Input::MessageElement in, -> int obxInc, -> string STData, -> string CXData, <- int obxOrderGroupId, -> Output::ORUR01 out )
{
	if(in.questionIdentifierNND.#PCDATA=="LAB143" ){
	   		string output ="";
	   		string combined = in.questionIdentifierNND.#PCDATA+"~"+in.observationSubID.#PCDATA;
	   		if( StrSize(CXData)>0 &&  StrFind(CXData,combined )>-1){
	   			int start = StrFind(CXData, in.questionIdentifierNND.#PCDATA+"~"+in.observationSubID.#PCDATA);
	   			string subString  = StrRight(CXData,StrSize(CXData)- start);
	   			int end =StrFind(subString, "|");
	   			if(end==-1)
	   				end =StrSize(subString) -StrSize(in.questionIdentifierNND.#PCDATA+"~"+in.observationSubID.#PCDATA)-1;
	   			string cxString  = StrRight(subString, end);
	   			//string test12 ="";
	   			if(StrFind(cxString, ":")>0){
	   				 output = StrRight(cxString,StrSize(cxString)- (StrFind(cxString, ":")+1));
	   			//	string test1121="";
	   			}else{
	   				 output =cxString;
	   			}
	   			int part1 =StrFind(output, "^");
	   			string identifier= StrLeft(output, part1);
	   			string rest = StrRight(output, StrSize(output)-part1-1);
	   			
	   			int part2 =StrFind(rest, "^");
	   			string description= StrLeft(rest, part2);
	   			string descriptionValue = StrRight(rest, StrSize(rest)-part2-1);
	
	   			//obxInc =obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obxInc].ValueType="ST";
	   			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID =obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier = in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text = in.questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem =in.questionOID.#PCDATA;
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier= in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = in.questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";

				
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] =in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationResultStatus = "F";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID =in.observationSubID.#PCDATA;;
				obxInc =obxInc+1;
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obxInc].ValueType="CX";
	   			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID = obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier = identifier;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text = description;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem = in.questionOID.#PCDATA;

				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier= identifier;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = description;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";

				//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem ="PHINQUESTION";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] =descriptionValue+ "^^^&"+in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA+"&ISO";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationResultStatus = "F";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = in.observationSubID.#PCDATA;
				/*out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier ="";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = "";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem= "";
				
				string junk123=out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0];
				
				string junk12="";
				*/
	   			string ST = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;   
	   			STData=STData+"|"+in.questionIdentifierNND.#PCDATA+"~"+in.observationSubID.#PCDATA+":"+ST;
	   		}else{
	   			//obxInc =obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obxInc].ValueType="ST";
	   			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID =obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier = in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text = in.questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem =in.questionOID.#PCDATA;
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier= in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = in.questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";

				
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] =in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationResultStatus = "F";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID =in.observationSubID.#PCDATA;;
				
	   			string ST = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;   
	   			STData=STData+"|"+in.questionIdentifierNND.#PCDATA+"~"+in.observationSubID.#PCDATA+":"+ST;
	   		}
			//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].
	
		}else if(in.dataElement.questionDataTypeNND.#PCDATA=="CX" && StrSize(in.questionMap.#PCDATA)>0){
	   		if( StrSize(STData)>0 &&  StrFind(STData, in.questionMap.#PCDATA+"~"+in.observationSubID.#PCDATA)>-1){
	   			int start = StrFind(STData, in.questionMap.#PCDATA+"~"+in.observationSubID.#PCDATA);
	   			string subString  = StrRight(STData,StrSize(STData)- start);
	   			int end =StrFind(subString, "|");
	   			if(end==-1)
	   				end =StrSize(subString) -StrSize(in.questionMap.#PCDATA+"~"+in.observationSubID.#PCDATA)-1;
	   			else 
	   				end =StrSize(subString) -StrSize(in.questionMap.#PCDATA+"~"+in.observationSubID.#PCDATA)-1;
	   			string STString  = StrRight(subString, end);
				//obxInc =obxInc+1;

	   			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[obxInc].ValueType="CX";
	   			out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].SetID =obxInc+1;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Identifier = in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.Text = in.questionLabel.#PCDATA;
				
				
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateIdentifier= in.questionIdentifierNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.AlternateText = in.questionLabelNND.#PCDATA;
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfAlternateCodingSystem="L";

				
				//out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationIdentifier.NameOfCodingSystem ="PHINQUESTION";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] =in.dataElement.LocalComplex#1#Grp1.cxDataType.cxData.#PCDATA+ "^^^&"+STString+"&ISO";
				//string test=out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationValue[0] ;
				//string test1=in.dataElement.LocalComplex#1#Grp1.cxDataType.cxData.#PCDATA+ "^^^&"+STString+"&ISO";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationResultStatus = "F";
				out.PATIENT_RESULT.ORDER_OBSERVATION[0].OBSERVATION[obxOrderGroupId].OBX[obxInc].ObservationSubID = in.observationSubID.#PCDATA;
	   		}else{
	   			CXData=CXData+"|"+in.questionMap.#PCDATA+"~"+in.observationSubID.#PCDATA+":" +in.questionIdentifierNND.#PCDATA
	   							+"^"+in.questionLabelNND.#PCDATA  +"^"+in.dataElement.LocalComplex#1#Grp1.cxDataType.cxData.#PCDATA;
	   			obxInc =obxInc-1;
	   		}				
	   	}
		

}


map MapLabEventToSPM( <- Input::LocalComplex#20 in, -> Output::ORUR01 out )
{

}


map MapLabReportEventToOBR( <- Input::LabReportEvent in, -> int obrCounter, -> int labObrCounter, <- string messageType, <- int rootIndicator,  EIElement eiElement,  ParentLink parentLink, -> int obxSubidCounter, -> string cachedOBX3data, -> Output::ORUR01 out )
{
	int labSubCounter = 0;
	int specimenCounter= 1;
	int isValidSPM=0;
	string resultStatus="";
	int reasonForStudyCounter=0;
	EIElement eiType;	
	cachedOBX3data="";
	//int obxSubidCounter = 0;
	out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].SetID =labObrCounter;
	for(int i=0;i<sizeof(in.MessageElement[*]); i=i+1 ){
		string hl7Field = (in.MessageElement[i].hl7SegmentField.#PCDATA);

		if (StrLeft(hl7Field,4 )=="OBR-")//OBR-3.0
		{
			string dataElement= StrRemove(hl7Field, "OBR-");

			if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "2.")==0){//lab
				MapToEIType(in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].PlacerOrderNumber);
			}else if(StrRFind(dataElement, "3.")==0){//lab
				MapToEIType(in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].FillerOrderNumber);
				eiType.EntityIdentifier = out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].FillerOrderNumber.EntityIdentifier;
				eiType.NamespaceID= out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].FillerOrderNumber.NamespaceID;
				eiType.UniversalID= out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].FillerOrderNumber.UniversalID;
				eiType.UniversalIDType= out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].FillerOrderNumber.UniversalIDType;
			}else if(StrRFind(dataElement, "4.")==0){//lab
				string dataLocator= StrRemove(dataElement, "4.");

				MapToCEType(in.MessageElement[i],  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].UniversalServiceID);
			}else if(StrRFind(dataElement, "5.")==0){
			}else if(StrRFind(dataElement, "6.")==0){
			}else if(StrRFind(dataElement, "7.")==0){//lab
				MapToTS18DataType(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ObservationDateTime);
			}
			else if(StrRFind(dataElement, "14.")==0){
			}else if(StrRFind(dataElement, "16.")==0){//lab
			}else if(StrRFind(dataElement, "22.")==0){////lab
				MapToTS18DataType(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ResultsRptStatusChngDateTime);				
			}else if(StrRFind(dataElement, "25.")==0){//lab
				out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ResultStatus= in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
			}else if(StrRFind(dataElement, "28.")==0){
			}else if(StrRFind(dataElement, "31.")==0){//lab
				MapToCEType(in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ReasonForStudy[reasonForStudyCounter]);
				reasonForStudyCounter =reasonForStudyCounter+1;
			}else if(StrRFind(dataElement, "35.")==0){
				//MapToCEType(in, dataLocator, out.Race[raceCounterNK1]);
				//raceCounterNK1 = raceCounterNK1+1;
			}
		}else if (StrLeft(hl7Field,4 )=="SPM-")//LAB
		{
			string dataElement= StrRemove(hl7Field, "SPM-");
			if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "2.1")==0){
				MapToEIType (  in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenID.PlacerAssignedIdentifier);
			}else if(StrRFind(dataElement, "2.2")==0){
				MapToEIType (  in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenID.FillerAssignedIdentifier);
			}else if(StrRFind(dataElement, "4.")==0){
				MapToCWEType(in.MessageElement[i],  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenType);
				isValidSPM = 1;

			}else if(StrRFind(dataElement, "8")==0){
				MapToCWEType(in.MessageElement[i],  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenSourceSite);
			}else if(StrRFind(dataElement, "11")==0){
			}else if(StrRFind(dataElement, "12.0")==0){
				out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenCollectionAmount.Quantity =  StrToDbl(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.nmDataType.num.#PCDATA);
			}else if(StrRFind(dataElement, "12.1")==0){
			}else if(StrRFind(dataElement, "12.2")==0){
				MapToCEType(in.MessageElement[i],  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenCollectionAmount.Units);
				
			}else if(StrRFind(dataElement, "14")==0){
				 out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenDescription[0] = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			}else if(StrRFind(dataElement, "17")==0){
				MapToTS18DataType(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA, out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SpecimenCollectionDateTime.RangeStartDateTime);

			}else if(StrRFind(dataElement, "18")==0){
			} 
			
	
		}
		if(isValidSPM == 0){
			setEmpty(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter]);
		}else{
			out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].Specimen[specimenCounter].SPM.SetID =1;
		}
		//MapToOBR(in.MessageElement[i], out);
	}
	if(StrSize(eiElement.EntityIdentifier)>0){
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentNumber.FillerAssignedIdentifier.EntityIdentifier= eiElement.EntityIdentifier;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentNumber.FillerAssignedIdentifier.NamespaceID= eiElement.NamespaceID;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentNumber.FillerAssignedIdentifier.UniversalID= eiElement.UniversalID;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentNumber.FillerAssignedIdentifier.UniversalIDType= eiElement.UniversalIDType;

	}
	if(StrSize(parentLink.ObservationValue)>0){
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.Text=parentLink.Text;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.NameOfCodingSystem=parentLink.NameOfCodingSystem;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.Identifier=parentLink.Identifier;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.AlternateText=parentLink.AlternateText;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.NameOfAlternateCodingSystem=parentLink.NameOfAlternateCodingSystem;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationIdentifier.AlternateIdentifier=parentLink.AlternateIdentifier;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationSubIdentifier=parentLink.ObservationSubID;
		out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBR[labSubCounter].ParentResult.ParentObservationValueDescriptor=parentLink.ObservationValue;
	}
		int resultedTestCounter = 0;	
		int previousCounter = 0;
		int repeatCounter =0;
		for(int k=0;k<sizeof(in.ResultedTest[*]); k=k+1 ){
		string specimenCollectionDate="";
		string dateTimeOfAnalysis="";
		string OBXResult="";
		string referenceRangeFrom="";
		string referenceRangeTo="";
		string interpretationFlag="";
		int notesCounter = 0;	
			OBXResult="";
			referenceRangeTo="";
			referenceRangeFrom="";
			ResultMethod resultMethod;	
			
			repeatCounter= repeatCounter +1;
			ParentLink parentLinkOBX;

			MapResultedTestToOBX(in.ResultedTest[k],obrCounter,labSubCounter,OBXResult,resultedTestCounter,notesCounter,referenceRangeFrom,  referenceRangeTo,resultStatus,messageType ,specimenCollectionDate, obrCounter+1, 
			eiType,dateTimeOfAnalysis, interpretationFlag, obxSubidCounter,cachedOBX3data,resultMethod,parentLinkOBX, out);
			int part1 =StrFind(OBXResult, "^");
	   		string identifier= StrLeft(OBXResult, part1);
	   		string rest = StrRight(OBXResult, StrSize(OBXResult)-part1-1);
	   			
	   		int part2 =StrFind(rest, "^");
	   		string description= StrLeft(rest, part2);
	   		string descriptionValue = StrRight(rest, StrSize(rest)-part2-1);
	
	   		for(int j=previousCounter;j<sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[*]); j=j+1 ){
				
				if(StrSize(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labObrCounter].OBX[j].ObservationIdentifier.Identifier)<1){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.Identifier=identifier; 
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.NameOfCodingSystem=description; 
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.Text =descriptionValue;
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationResultStatus=resultStatus;
			
				}
				
				string output="";
				string outputIndex="";
				string subString  = ""; 
				//string identifier=parentLink.Identifier;
				
				if( StrSize(cachedOBX3data)>0 &&  StrFind(cachedOBX3data,(identifier+":") )>-1){
					int start = StrFind(cachedOBX3data, (identifier+":"));
					if (start==0){
						int contTest = StrFind(cachedOBX3data, "||");
						subString  = StrLeft(cachedOBX3data,contTest);
						int counterFinder=StrFind(subString, ":");
						string obxSubidCounterTest = StrRight(subString,StrSize(subString)-counterFinder-1 );
						int obxSubidCounterTestInt =  StrToInt(obxSubidCounterTest);					
						cachedOBX3data =StrReplace(cachedOBX3data, (identifier+":"+obxSubidCounterTest), (identifier+":"+(obxSubidCounterTestInt+1)));
						obxSubidCounter= obxSubidCounterTestInt+1;
				
					}else{
						string tester =identifier+":";
						int contTest = StrFind(cachedOBX3data, tester); 
						string cachedString = StrMid(cachedOBX3data, contTest, (StrSize(identifier)+6));
						string cachedStringWithoutMarker = StrLeft(cachedString, StrFind(cachedString, "||"));
						string counterNumber = StrMid(cachedStringWithoutMarker, StrFind(cachedStringWithoutMarker, ":")+1, StrSize(cachedStringWithoutMarker));
						int obxSubidCounterTestInt =  StrToInt(counterNumber);	
						cachedOBX3data =StrReplace(cachedOBX3data, (identifier+":"+counterNumber), (identifier+":"+(obxSubidCounterTestInt+1)));
						obxSubidCounter = obxSubidCounterTestInt+1;					}
	   				
	   			}else{
					cachedOBX3data = cachedOBX3data+ identifier + ":1"+"||";
					obxSubidCounter= 1;
				
				}
				
				parentLinkOBX.ObservationSubID= IntToStr(obxSubidCounter);
				
				
					
				if(StrSize(referenceRangeFrom)>0 && StrSize(referenceRangeTo)>0){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ReferencesRange = referenceRangeFrom+"-"+referenceRangeTo;
				}else if(StrSize(referenceRangeFrom)>0 || StrSize(referenceRangeTo)>0){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ReferencesRange = referenceRangeFrom+referenceRangeTo;
				} 
				if(StrSize(specimenCollectionDate)>0){
					MapToDTM18(specimenCollectionDate,  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].DateTimeOfTheObservation.Time);
					}if(StrSize(dateTimeOfAnalysis)>0){
					MapToDTM18(dateTimeOfAnalysis,  out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].DateTimeOfTheAnalysis.Time);
	
				}
				
				if(StrSize(interpretationFlag)>0){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].AbnormalFlags[0]=interpretationFlag;
				}
				if(StrSize(resultMethod.Text)>0){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationMethod[0].Text=resultMethod.Text;
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationMethod[0].NameOfCodingSystem=resultMethod.NameOfCodingSystem;
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationMethod[0].Identifier=resultMethod.code;
					
				}
				string test = out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationValue[0];
				string test2 = out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.Text;
				string test3 = out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ValueType;
				
				/*if(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationValue[0]=="\"\""){
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ValueType="TX";
		  		}*/
				out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationSubID=IntToStr(obxSubidCounter);
				
				
				if(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ValueType=="CWE" || 
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ValueType=="CE"){
						parentLinkOBX.Identifier=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.Identifier;
					parentLinkOBX.NameOfCodingSystem=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.NameOfCodingSystem;
					parentLinkOBX.Text=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.Text;
					parentLinkOBX.AlternateIdentifier=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.AlternateText;
					parentLinkOBX.NameOfAlternateCodingSystem=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.NameOfAlternateCodingSystem;
					parentLinkOBX.AlternateText=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationIdentifier.AlternateText;
					parentLinkOBX.ObservationSubID=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationSubID;
					parentLinkOBX.ObservationValue=out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[j].ObservationValue[0];
					MapToSusceptabilityOBX(in.ResultedTest[k],obrCounter,labSubCounter,resultedTestCounter,obrCounter+1, messageType,parentLinkOBX, eiType,out);
				}

			}
			
			previousCounter =sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[obrCounter].OBSERVATION[labSubCounter].OBX[*]);
		}
		
		

		
}



map MapResultedTestToOBX( <- Input::LocalComplex#20 in, -> int obrSubCounter, <- int observationCounter, -> string OBXResult, -> int resultedTestCounter, -> int notesCounter, -> string referenceRangeFrom, -> string referenceRangeTo, -> string resultStatus, <- string messageType, -> string specimenCollectionDate, -> int obrCounter,  EIElement eiElement, -> string dateTimeOfAnalysis, -> string interpretationFlag, -> int obxSubidCounter, -> string cachedOBX3data,  ResultMethod resultMethod,  ParentLink parentLink, -> Output::ORUR01 out )
{
	//ParentLink parentLink;
	int valueTypeChecker=0;
	
	for(int i=0;i<sizeof(in.MessageElement[*]); i=i+1 ){
		string hl7Field = (in.MessageElement[i].hl7SegmentField.#PCDATA);

		if (StrLeft(hl7Field,4 )=="OBX-")//OBX-3.0
		{
			string dataElement= StrRemove(hl7Field, "OBX-");
			if( StrRFind(dataElement, "5.")==0 ){
				int counter = sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationValue);
				if(counter >0){
					resultedTestCounter =resultedTestCounter+1;
				}
				out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].SetID =resultedTestCounter+1; 		
			}

			if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "1.")==0){
			}else if(StrRFind(dataElement, "2.")==0){
			}else if(StrRFind(dataElement, "3.")==0){
				//string output = "";
				MapCodedToStringValue(in.MessageElement[i] , OBXResult,parentLink);
				
			}else if(StrRFind(dataElement, "5.")==0){//lab
			
			
			if (in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA == "SN_WITH_UNIT")
				{
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ValueType = "SN";
					valueTypeChecker=1;
					
					string codedValue = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValue.#PCDATA))
						codedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValue.#PCDATA;
					string codedValueDescription = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueDescription.#PCDATA))
						codedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueDescription.#PCDATA;
					string codedValueCodingSystem = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueCodingSystem.#PCDATA))
						codedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueCodingSystem.#PCDATA;
					string localCodedValue = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValue.#PCDATA))
						localCodedValue = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValue.#PCDATA;
					string localCodedValueDescription = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueDescription.#PCDATA))
						localCodedValueDescription = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueDescription.#PCDATA;
					string localCodedValueCodingSystem = "";
					if (exists(in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueCodingSystem.#PCDATA))
						localCodedValueCodingSystem = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.snunitDataType.ceLocalCodedValueCodingSystem.#PCDATA;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.Identifier=codedValue;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.NameOfCodingSystem=codedValueCodingSystem;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.Text=codedValueDescription;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.AlternateIdentifier=localCodedValue;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.NameOfAlternateCodingSystem=localCodedValueCodingSystem;
						out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units.AlternateText=localCodedValueDescription;
					
				}
				else 
				{
					//valueType= in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;
					out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ValueType = in.MessageElement[i].dataElement.questionDataTypeNND.#PCDATA;
					valueTypeChecker=1;

				}
	
				MapToObservationValue(in.MessageElement[i],out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationValue[0]);
				MapToObservationValue(in.MessageElement[i],out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationValue[0]);

			}else if(StrRFind(dataElement, "6.")==0){//lab
				
				MapToCEType(in.MessageElement[i],out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].Units);
			}else if(StrRFind(dataElement, "7.")==0){//lab
				string dataLocator= StrRemove(dataElement, "7.");
				
				if(in.MessageElement[i].questionIdentifier.#PCDATA=="LAB119" ||in.MessageElement[i].questionIdentifier.#PCDATA=="NBS373" )
					referenceRangeFrom  =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				if(in.MessageElement[i].questionIdentifier.#PCDATA=="LAB120"||in.MessageElement[i].questionIdentifier.#PCDATA=="NBS374" )
				referenceRangeTo  =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			}else if(StrRFind(dataElement, "8.")==0){//lab
			interpretationFlag =in.MessageElement[i].dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
			}else if(StrRFind(dataElement, "11.")==0){//lab
				resultStatus = in.MessageElement[i].dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
				
			}else if(StrRFind(dataElement, "14.")==0){//lab
				specimenCollectionDate=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			}else if(StrRFind(dataElement, "17.")==0){//lab
				//MapToCEType(in.MessageElement[i], out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationMethod[0]);
				resultMethod.code=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
				resultMethod.NameOfCodingSystem=  in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
		    	resultMethod.Text=  in.MessageElement[i].dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
			}else if(StrRFind(dataElement, "19.")==0){//lab
			 	dateTimeOfAnalysis=in.MessageElement[i].dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			}else if(StrRFind(dataElement, "23.1")==0){//lab
				//string dataLocator= StrRemove(dataElement, "7.");
			}
		}
	}
	
	
	if(out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ValueType==""){
		setEmpty(out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].Specimen[observationCounter]);
	}
	if(valueTypeChecker==0){
			//out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ValueType="TX";
			int counter = sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationValue);
			if(counter >0){
				resultedTestCounter =resultedTestCounter+1;
			}
			out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ObservationValue[0]="\"\"";
			out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].SetID =resultedTestCounter+1; 		
			out.PATIENT_RESULT.ORDER_OBSERVATION[obrSubCounter].OBSERVATION[observationCounter].OBX[resultedTestCounter].ValueType="TX";
	}
	
	
	

}


map MapToSusceptabilityOBX( <- Input::LocalComplex#20 in, -> int obrSubCounter, -> int observationCounter, -> int resultedTestCounter, -> int obrCounter, <- string messageType,  ParentLink parentLink,  EIElement eiElement, -> Output::ORUR01 out )
{

	int	labObrCounter = 0;
    for(int i=0;i<sizeof(in.LabReportEvent[*]); i=i+1)
	{
		obrCounter = sizeof(out.PATIENT_RESULT.ORDER_OBSERVATION[*]);
		int obxSUSSubidCounter = 1;
		string cachedSUSOBX3data ="";
		if(sizeof(in.LabReportEvent[i].MessageElement[*])>0){
			labObrCounter = obrCounter+1;
			MapLabReportEventToOBR(in.LabReportEvent[i], obrCounter, obrCounter+1, messageType, 1,eiElement, parentLink,obxSUSSubidCounter,cachedSUSOBX3data, out);
		}
	}
}


map MapToOBR( <- Input::MessageElement in, -> Output::ORUR01 out )
{

}


map MapToOBX( <- Input::MessageElement in, -> Output::ORUR01 out )
{

}


map MapToCWEType( <- Input::MessageElement in, -> Output::CWE out )
{
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue))
		{
	    	out.Identifier=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
		}else{
			out.Identifier = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem))
		{
	    	out.NameOfCodingSystem=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
		}else{
			out.NameOfCodingSystem = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription))
		{
	    	out.Text=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
		}else{
			out.Text = "MISSING";
		}
		
	
		/*if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue))
		{
	    	out.AlternateIdentifier=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
		}else{
			out.AlternateIdentifier= "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem))
		{
	    	out.NameOfAlternateCodingSystem=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
		}else{
			out.NameOfAlternateCodingSystem= "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription))
		{
	    	out.AlternateText=  in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
		}else{
			out.AlternateText= "MISSING";
		}*/


}


map MapToEIType( <- Input::MessageElement in, -> Output::EI out )
{
	if (exists( in.dataElement.LocalComplex#1#Grp1.eiDataType.entityIdentifier))
	{
    	out.EntityIdentifier=  in.dataElement.LocalComplex#1#Grp1.eiDataType.entityIdentifier.#PCDATA;
	}
	if (exists( in.dataElement.LocalComplex#1#Grp1.eiDataType.namespaceId))
	{
    	out.NamespaceID=  in.dataElement.LocalComplex#1#Grp1.eiDataType.namespaceId.#PCDATA;
	}
	if (exists( in.dataElement.LocalComplex#1#Grp1.eiDataType.universalId))
	{
    	out.UniversalID=  in.dataElement.LocalComplex#1#Grp1.eiDataType.universalId.#PCDATA;
	}
	if (exists( in.dataElement.LocalComplex#1#Grp1.eiDataType.universalIdType))
	{
    	out.UniversalIDType=  in.dataElement.LocalComplex#1#Grp1.eiDataType.universalIdType.#PCDATA;
	}

}


map MapToObservationValue( <- Input::MessageElement in, -> string out )
{
	
	
				//XPN datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "XPN")
				{
					string comparator = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA))
						comparator = in.dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA;
	
					string num1 = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA))
						num1 = in.dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA;
	
					string separatorSuffix = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA))
						separatorSuffix = in.dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA;
	
					string num2 = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA))
						num2 = in.dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA;
	
					out= comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
				}
	
				//XTN datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "XTN")
				{
					string telecommunicationUseCode = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationUseCode.#PCDATA))
						telecommunicationUseCode = in.dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationUseCode.#PCDATA;
	
					string telecommunicationEquipmentType = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationEquipmentType.#PCDATA))
						telecommunicationEquipmentType = in.dataElement.LocalComplex#1#Grp1.xtnDataType.telecommunicationEquipmentType.#PCDATA;
	
					string emailAddress = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.xtnDataType.emailAddress.#PCDATA))
						emailAddress = in.dataElement.LocalComplex#1#Grp1.xtnDataType.emailAddress.#PCDATA;
	
					string areaOrCityCode = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.xtnDataType.areaOrCityCode.#PCDATA))
						areaOrCityCode = in.dataElement.LocalComplex#1#Grp1.xtnDataType.areaOrCityCode.#PCDATA;
	
					string phoneNumber = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.xtnDataType.phoneNumber.#PCDATA))
						phoneNumber = in.dataElement.LocalComplex#1#Grp1.xtnDataType.phoneNumber.#PCDATA;
	
					out ="^" + telecommunicationUseCode + "^" + telecommunicationEquipmentType + "^" + emailAddress + "^^" + areaOrCityCode +"^" + phoneNumber;
				}
							
				//XPN datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "XPN")
				{
					string familyName = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.xpnDataType.familyName.#PCDATA))
						familyName = in.dataElement.LocalComplex#1#Grp1.xpnDataType.familyName.#PCDATA;
	
					string givenName = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.xpnDataType.givenName.#PCDATA))
						givenName = in.dataElement.LocalComplex#1#Grp1.xpnDataType.givenName.#PCDATA;
	
	
					out=familyName + "^" + givenName;
				}
				
				//SN datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "SN")
				{
					string comparator = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA))
						comparator = in.dataElement.LocalComplex#1#Grp1.snDataType.comparator.#PCDATA;
	
					string num1 = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA))
						num1 = ""+in.dataElement.LocalComplex#1#Grp1.snDataType.num1.#PCDATA;
	
					string separatorSuffix = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA))
						separatorSuffix = in.dataElement.LocalComplex#1#Grp1.snDataType.separatorSuffix.#PCDATA;
	
					string num2 = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA))
						num2 = in.dataElement.LocalComplex#1#Grp1.snDataType.num2.#PCDATA;
	
					out =comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
													
				}
				
				//SN datatype with unit
				if (in.dataElement.questionDataTypeNND.#PCDATA == "SN_WITH_UNIT")
				{
						
					string comparator = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snunitDataType.comparator.#PCDATA))
						comparator = in.dataElement.LocalComplex#1#Grp1.snunitDataType.comparator.#PCDATA;
	
					string num1 = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.snunitDataType.num1.#PCDATA))
						num1 = in.dataElement.LocalComplex#1#Grp1.snunitDataType.num1.#PCDATA;
	
					string separatorSuffix = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snunitDataType.separatorSuffix.#PCDATA))
						separatorSuffix = in.dataElement.LocalComplex#1#Grp1.snunitDataType.separatorSuffix.#PCDATA;
	
					string num2 = ""; 
					if (exists(in.dataElement.LocalComplex#1#Grp1.snunitDataType.num2.#PCDATA))
						num2 = in.dataElement.LocalComplex#1#Grp1.snunitDataType.num2.#PCDATA;
	
					out=comparator + "^" +	num1 + "^" + separatorSuffix + "^" + num2;
						
					
				}
				else if (in.dataElement.questionDataTypeNND.#PCDATA == "ST")
				{
					string stringData = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
					out= stringData;				
				}
				
				//TX datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "TX")
				{
					string textData = in.dataElement.LocalComplex#1#Grp1.txDataType.textData.#PCDATA;
					textData = StrReplace(textData, "\n", " ");
					out = textData;				
				}
				
				//ID datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "ID")
				{
					string idCodedValue = in.dataElement.LocalComplex#1#Grp1.idDataType.idCodedValue.#PCDATA;
					out = idCodedValue;				
	
				}
				//IS datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "IS")
				{
					string isCodedValue = in.dataElement.LocalComplex#1#Grp1.isDataType.isCodedValue.#PCDATA;
					out = isCodedValue;
				}	
								
				//CWE datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "CWE")
				{
					string codedValue = "";
					string questionIdentifier =in.questionIdentifierNND.#PCDATA;
					
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
						codedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
					string codedValueDescription = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
						codedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
					string codedValueCodingSystem = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
						codedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
					string localCodedValue = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
						localCodedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
					string localCodedValueDescription = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
						localCodedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
					string localCodedValueCodingSystem = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
						localCodedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
					string originalText = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA))
						originalText = "^^^" + in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
				
					
						/*out= codedValue + "^" +
							 codedValueDescription + "^" +
							 codedValueCodingSystem + "^" +
							 localCodedValue + "^" +
							 localCodedValueDescription + "^" +
							 localCodedValueCodingSystem + 
							 originalText;*/
							 out= codedValue + "^"+
							 codedValueDescription + "^" +
							 codedValueCodingSystem + "^" +
							 localCodedValue + "^" +
							 localCodedValueDescription + "^" +
							 localCodedValueCodingSystem + 
							 originalText;

				}
				
				//CE datatype
				if (in.dataElement.questionDataTypeNND.#PCDATA == "CE")
				{
					string codedValue = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA))
						codedValue = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
					string codedValueDescription = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA))
						codedValueDescription = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
					string codedValueCodingSystem = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA))
						codedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
					string localCodedValue = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA))
						localCodedValue = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValue.#PCDATA;
					string localCodedValueDescription = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA))
						localCodedValueDescription = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueDescription.#PCDATA;
					string localCodedValueCodingSystem = "";
					if (exists(in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA))
						localCodedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceLocalCodedValueCodingSystem.#PCDATA;
	
					out= codedValue + "^" +
						 codedValueDescription + "^" +
						 codedValueCodingSystem + "^" +
						 localCodedValue + "^" +
						 localCodedValueDescription + "^" +
						 localCodedValueCodingSystem;
				}
	
					
			}
		

map MapCodedToStringValue( <- Input::MessageElement in, -> string out,  ParentLink parentLink )
{


	if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType)){
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue))
		{
	    	out=  in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
	    	parentLink.Identifier= in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
		}else{
			out= "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem))
		{
			parentLink.NameOfCodingSystem =in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
	    	out= out+"^"+ in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
		}else{
			out = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription))
		{
	    	parentLink.Text = in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
	    	out= out+"^"+ in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
		}else{
			out = "MISSING";
		}
	}
	
	if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType)){
	
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue))
		{
	    	out  =in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
	    	parentLink.Identifier= in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
		}else{
			out = "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem))
		{
			parentLink.NameOfCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
	    	out=  out+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
		}else{
			out = out+"^"+ "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription))
		{
	    	parentLink.Text = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
			out=  out+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
		}else{
			out = out+"^"+ "MISSING";
		}
		
	
		/*if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue))
		{
	    	out=  out+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
		}else{
			out= out+"^"+ "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem))
		{
	    	out=  out+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
		}else{
			out= out+"^"+ "MISSING";
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription))
		{
	    	out=  out+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
		}else{
			out= out+"^"+ "MISSING";
		}*/
	}


}


map MapToTS18DataType( <- string in, -> Output::TS out )
{
int stringSize=StrSize(in);
	out.Time.Year = StrToInt(StrLeft(in,4));
		if(stringSize<7){
			out.Time.Month=00;	
		}else{
			out.Time.Month = StrToInt(StrMid(in,5,2));
		}
		if(stringSize<10){
			out.Time.Day = 00;	
		}else{
		out.Time.Day = StrToInt(StrMid(in,8,2));
		}
		if(stringSize<13){
			out.Time.Hours=00;	
		}else{
			out.Time.Hours = StrToInt(StrMid(in,11,2));
		}
	
		if(stringSize<16){
			out.Time.Minutes = 00;	
		}else{
			out.Time.Minutes = StrToInt(StrMid(in,14,2));
		}
		if(stringSize<19){
		out.Time.Seconds = 00;
		}else{
			out.Time.Seconds = StrToInt(StrMid(in,17,2));
		}
	
		if(stringSize<23){
			out.Time.Millis =000;
			out.Time.seperator=".";
		}else{
			out.Time.seperator=".";
			out.Time.Millis  = StrToInt(StrMid(in,20,3));
		}
		

}


map MapToDTM18( <- string in, -> Output::DTM out )
{
	int stringSize=StrSize(in);
	out.Year = StrToInt(StrLeft(in,4));
		if(stringSize<7){
			out.Month=00;	
		}else{
			out.Month = StrToInt(StrMid(in,5,2));
		}
		if(stringSize<10){
			out.Day = 00;	
		}else{
		out.Day = StrToInt(StrMid(in,8,2));
		}
		if(stringSize<13){
			out.Hours=00;	
		}else{
			out.Hours = StrToInt(StrMid(in,11,2));
		}
	
		if(stringSize<16){
			out.Minutes = 00;	
		}else{
			out.Minutes = StrToInt(StrMid(in,14,2));
		}
		if(stringSize<19){
		out.Seconds = 00;
		}else{
			out.Seconds = StrToInt(StrMid(in,17,2));
		}
	
		if(stringSize<23){
			out.Millis =000;
			out.seperator=".";
		}else{
			out.seperator=".";
			out.Millis  = StrToInt(StrMid(in,20,3));
		}
		

}

map MapToRepeat( <- Input::MessageElement input, -> Output::ORUR01#PATIENT_RESULT result, -> int counter )
{


/*	
	string indPartMain="";
	string indPart1="";
	string indPart2="";
	string indPart3="";
	string indPart4="";
	string indPart5="";
	string indPart6="";
		
	string questPart1="";
	string questPart2="";
	string questPart3="";
	string questPart4="";
	string questPart5="";
	string questPart6="";
	
	string quest2Part1="";
	string quest2Part2="";
	string quest2Part3="";
	string quest2Part4="";
	string quest2Part5="";
	string quest2Part6="";
	
	string indicatorCode=input.indicatorCd.#PCDATA;
	int startInd = StrFind(indicatorCode, "|");
	string subStringRightInd  = StrRight(indicatorCode,StrSize(indicatorCode)- startInd-1);
	
	int endInd =StrFind(indicatorCode, "|");
	string subStringLeftInd  = StrLeft(indicatorCode, startInd);
	indPartMain  = "^"+subStringLeftInd+"^";
	
		if(StrFind(subStringRightInd, "^") > 0){
			int startPartInt1 = StrFind(subStringRightInd, "^");
			 indPart1  = StrLeft(subStringRightInd,startPartInt1);
			string RemainingPart1  = StrRight(subStringRightInd,StrSize(subStringRightInd)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			 indPart2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			 indPart3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			 indPart4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);

		

			int startPartInt5 = StrFind(RemainingPart4, "^");
			 indPart5  = StrLeft(RemainingPart4,startPartInt5);
			 indPart6 = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);

	}
	
	
	
	string questionMap=input.questionMap.#PCDATA;
	int start = StrFind(questionMap, "|");
	string subStringRight  = StrRight(questionMap,StrSize(questionMap)- start-1);
	
	int end =StrFind(questionMap, "|");
	string subStringLeft  = StrLeft(questionMap, start);

	
		if(StrFind(subStringLeft, "^") > 0){
			int startPartInt1 = StrFind(subStringLeft, "^");
			questPart1  = StrLeft(subStringLeft,startPartInt1);
			string RemainingPart1  = StrRight(subStringLeft,StrSize(subStringLeft)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			questPart2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			
			questPart3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			questPart4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);

			int startPartInt5 = StrFind(RemainingPart4, "^");
			questPart5  = StrLeft(RemainingPart4,startPartInt5);
			questPart6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);

						
			
			
		}
	
		if(StrFind(subStringRight, "^") > 0){
			int startPartInt1 = StrFind(subStringRight, "^");
			quest2Part1  = StrLeft(subStringRight,startPartInt1);
			string RemainingPart1  = StrRight(subStringRight,StrSize(subStringRight)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			quest2Part2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			quest2Part3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			quest2Part4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);

		

			int startPartInt5 = StrFind(RemainingPart4, "^");
			quest2Part5  = StrLeft(RemainingPart4,startPartInt5);
			quest2Part6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
	
		
	}
	//string test22=("^"+input.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA +"^");

	
	
	if( StrFind(input.questionIdentifierNND.#PCDATA, "_OTH")>0){
			
		string tester = "";
	 	for(int i=0;i<sizeof(result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[*]); i=i+1)
		{
			if(result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[i].ObservationIdentifier.Identifier==questPart1 &&  StrFind(result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[i].ObservationValue[0], "OTH^")==0){
				result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[i].ObservationValue[0]=   result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[i].ObservationValue[0]+"^^^^^^"+input.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
				tester = "mapped";
			}
		}
		if(StrSize(tester)<1){
			discreteRepeat.otherText= input.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}

	}
	else if(StrFind (indPartMain, ("^"+input.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA +"^"))>-1){
		
		if (discreteRepeat.code == questPart1){
			discreteRepeat.counter = discreteRepeat.counter+1;
		}else{
			discreteRepeat.counter = 1;
			discreteRepeat.code = questPart1;
			
		}
		

		//Case 2
					
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].SetID=counter+1;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ValueType = "CWE";
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.Identifier=questPart1;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.Text=questPart2;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfCodingSystem=questPart3;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateIdentifier =questPart4;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateText=questPart5;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfAlternateCodingSystem=questPart6;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationValue[0] = input.questionIdentifierNND.#PCDATA+"^"+input.questionLabelNND.#PCDATA+"^"+input.questionOID.#PCDATA;
			
			if(input.questionIdentifierNND.#PCDATA =="OTH" && StrSize(discreteRepeat.otherText)>0){
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationValue[0] =result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationValue[0]+"^^^^^^"+discreteRepeat.otherText;
			}
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationSubID=IntToStr(discreteRepeat.counter);
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationResultStatus = "F";
	
			counter = counter+1;
	
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].SetID=counter+1;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ValueType = "CWE";
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.Identifier=indPart1;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.Text=indPart2;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfCodingSystem=indPart3;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateIdentifier =indPart4;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateText=indPart5;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfAlternateCodingSystem=indPart6;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationValue[0]= input.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA+"^"+
			input.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA+"^"+
			input.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationSubID=IntToStr(discreteRepeat.counter);
			result.ORDER_OBSERVATION[0].OBSERVATION[1].OBX[counter].ObservationResultStatus = "F";
				
			counter = counter+1;
			
	}
	*/
	
	
}	

map MapToQuestionMap( <- Input::MessageElement in, -> int obx2Inc, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	string indPartMain="";
	string indPart1="";
	string indPart2="";
	string indPart3="";
	string indPart4="";
	string indPart5="";
	string indPart6="";
		
	string questPart1="";
	string questPart2="";
	string questPart3="";
	string questPart4="";
	string questPart5="";
	string questPart6="";
	
	string quest2Part1="";
	string quest2Part2="";
	string quest2Part3="";
	string quest2Part4="";
	string quest2Part5="";
	string quest2Part6="";
	
	string otherText="";
	int obx4Counter=1;
	int mappedAsOtherInt=0;
	string unkcode="";
	string unkObx5="";
	string subStringRightInd  = "";
	string mappedValue ="";
	string indicatorCode=in.indicatorCd.#PCDATA;
	string mappedIndicatorCode=in.indicatorCd.#PCDATA;
	int startInd = StrFind(indicatorCode, "|");
	int checkPoint = StrFind(indicatorCode, ":>");
	int splitCounter= StrFieldCount(indicatorCode,"|");
	int mapToQuestionId =StrFind(indicatorCode, "|:");
	if(splitCounter==3){
		mappedIndicatorCode = StrRight(indicatorCode, (StrSize(indicatorCode)-mapToQuestionId-2));
		indicatorCode = StrLeft(indicatorCode, mapToQuestionId);
	}
	
	if(checkPoint>0){
		mappedValue = StrLeft(indicatorCode,StrFind(indicatorCode, ">")-1);
		indicatorCode= StrRight(indicatorCode,StrSize(indicatorCode)- startInd-1);
		unkObx5  = StrLeft(indicatorCode,StrFind(indicatorCode, "|"));
		//indicatorCode  = StrRight(subStringRight,StrSize(subStringRight)-StrFind(subStringRight, "|")-1);
		
		subStringRightInd  =  StrRight(indicatorCode,  StrSize(indicatorCode)- StrFind(indicatorCode, "|")-1);
	}else{
			subStringRightInd  = StrRight(indicatorCode,StrSize(indicatorCode)- startInd-1);
	}
	
	int endInd =StrFind(indicatorCode, "|");
	string subStringLeftInd  = StrLeft(indicatorCode, startInd);
	indPartMain  = "^"+subStringLeftInd+"^";
			/*if(StrFind(subStringLeftInd, "^") > 0){
			int startPartInt1 = StrFind(subStringLeftInd, "^");
			 indPartMain  = "^"+StrLeft(subStringLeftInd,startPartInt1)+"^";
		}*/
	
		if(StrFind(subStringRightInd, "^") > 0){
			int startPartInt1 = StrFind(subStringRightInd, "^");
			 indPart1  = StrLeft(subStringRightInd,startPartInt1);
			string RemainingPart1  = StrRight(subStringRightInd,StrSize(subStringRightInd)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			 indPart2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			 indPart3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			 indPart4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);
	
		
	
			int startPartInt5 = StrFind(RemainingPart4, "^");
			 indPart5  = StrLeft(RemainingPart4,startPartInt5);
			 indPart6 = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
	
	}
	
	
	
	string questionMap=in.questionMap.#PCDATA;
	int start = StrFind(questionMap, "|");
	string subStringRight  = StrRight(questionMap,StrSize(questionMap)- start-1);
	
	int end =StrFind(questionMap, "|");
	string subStringLeft  = StrLeft(questionMap, start);
	
	
		if(StrFind(subStringLeft, "^") > 0){
			int startPartInt1 = StrFind(subStringLeft, "^");
			questPart1  = StrLeft(subStringLeft,startPartInt1);
			string RemainingPart1  = StrRight(subStringLeft,StrSize(subStringLeft)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			questPart2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			
			questPart3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			questPart4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);
	
			int startPartInt5 = StrFind(RemainingPart4, "^");
			questPart5  = StrLeft(RemainingPart4,startPartInt5);
			questPart6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
	
						
			
			
		}
	
		if(StrFind(subStringRight, "^") > 0){
			int startPartInt1 = StrFind(subStringRight, "^");
			quest2Part1  = StrLeft(subStringRight,startPartInt1);
			string RemainingPart1  = StrRight(subStringRight,StrSize(subStringRight)- startPartInt1-1);
		
		
			int startPartInt2 = StrFind(RemainingPart1, "^");
			quest2Part2 = StrLeft(RemainingPart1,startPartInt2);
			string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
			
			
			
			int startPartInt3 = StrFind(RemainingPart2, "^");
			quest2Part3  = StrLeft(RemainingPart2,startPartInt3);
			string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
		
			int startPartInt4 = StrFind(RemainingPart3, "^");
			quest2Part4  = StrLeft(RemainingPart3,startPartInt4);
			string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);
	
		
	
			int startPartInt5 = StrFind(RemainingPart4, "^");
			quest2Part5  = StrLeft(RemainingPart4,startPartInt5);
			quest2Part6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
	
		
	}
	
	if(StrSize(mappedValue)>0 && mappedValue!= in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA){
		
	}else if(StrFind(in.dataElement.questionDataTypeNND.#PCDATA, "SN_WITH_UNIT")==0){
	
		int checkerNum =0;
		for(int x=0;x<sizeof(discreteRepeatSNTypeArray[*]); x=x+1 )
		{
			if (discreteRepeatSNTypeArray[x].mappedIndicatorCode==mappedIndicatorCode){
				obx4Counter= discreteRepeatSNTypeArray[x].obx4counter;
				checkerNum=1;
			}
			 
		}
		if (checkerNum==0){
			DiscreteRepeat discreteRepeat = discreteRepeatSNTypeArray[+];
			discreteRepeat.obx4counter = sizeof(discreteRepeatSNTypeArray[*]);
			obx4Counter=discreteRepeat.obx4counter;
			discreteRepeat.code = questPart1;
			discreteRepeat.mappedIndicatorCode=mappedIndicatorCode;
			discreteRepeat.counter=obx2Inc;
		}
		out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
		out.OBSERVATION[1].OBX[obx2Inc].ValueType = "SN";
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier=questPart1;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text=questPart2;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=questPart3;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =in.questionIdentifierNND.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=in.questionLabelNND.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem=questPart6;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(obx4Counter);
	
		out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]= "^"+in.dataElement.LocalComplex#1#Grp1.snunitDataType.num1.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].Units.Identifier=in.dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValue.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].Units.Text=in.dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueDescription.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].Units.NameOfCodingSystem=in.dataElement.LocalComplex#1#Grp1.snunitDataType.ceCodedValueCodingSystem.#PCDATA;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
		
		obx2Inc = obx2Inc+1;
					
	    }else if( StrFind(in.questionIdentifierNND.#PCDATA, "_OTH")>0){
			int checkerNum =0;
			string tester="";	
			for(int j=0;j<sizeof(out.OBSERVATION[1].OBX[*]); j=j+1)
			{
				string originalText = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
						if(StrSize(originalText)>0){
							originalText=StrReplace(originalText, "\\", "\\E\\");
							originalText=StrReplace(originalText, "|", "\\F\\");
							originalText=StrReplace(originalText, "~", "\\R\\");
							originalText=StrReplace(originalText, "^", "\\S\\");
							originalText=StrReplace(originalText, "&", "\\T\\");
						}
				if(out.OBSERVATION[1].OBX[j].ObservationIdentifier.Identifier==questPart1 &&  StrFind(out.OBSERVATION[1].OBX[j].ObservationValue[0], "OTH^")==0){
					out.OBSERVATION[1].OBX[j].ObservationValue[0]=   out.OBSERVATION[1].OBX[j].ObservationValue[0]+"^^^^^^"+originalText;
					tester = "mapped";
				}
			}
			if(StrSize(tester)<1){
				otherText = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
							if(StrSize(otherText)>0){
								otherText=StrReplace(otherText, "\\", "\\E\\");
								otherText=StrReplace(otherText, "|", "\\F\\");
								otherText=StrReplace(otherText, "~", "\\R\\");
								otherText=StrReplace(otherText, "^", "\\S\\");
								otherText=StrReplace(otherText, "&", "\\T\\");
							} 			
			for(int x=0;x<sizeof(discreteRepeatArray[*]); x=x+1 )
			{
				if (discreteRepeatArray[x].code == questPart1){
					discreteRepeatArray[x].otherText= otherText;
					; 
				}	
			}
			if( sizeof(discreteRepeatArray[*])==0) {
				DiscreteRepeat discreteRepeat = discreteRepeatArray[+];
				//discreteRepeat.counter = 1;
				discreteRepeat.code = questPart1;
				discreteRepeat.otherText = otherText;
			}
			//discreteRepeat.otherText= in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
		}else{
			for(int x=0;x<sizeof(discreteRepeatArray[*]); x=x+1 )
			{
				if (discreteRepeatArray[x].code == questPart1){
					discreteRepeatArray[x].otherText= otherText;
					checkerNum = 1; 
				}	
			}
			if (checkerNum==0){
				DiscreteRepeat discreteRepeat = discreteRepeatArray[+];
				discreteRepeat.counter = 1;
				discreteRepeat.code = questPart1;
				discreteRepeat.otherText = otherText;
				mappedAsOtherInt=1;
			}
		}
	
	
	}
	else if(StrFind (indPartMain, ("^"+in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA +"^"))>-1 ||   StrSize(unkObx5)>0 ){	
		int checkerNum =0;
		string id = in.questionIdentifier.#PCDATA;
		if(splitCounter==3){
			int checkerNumDetail =0;
			for(int x=0;x<sizeof(discreteRepeatSNTypeArray[*]); x=x+1 )
			{
				if (discreteRepeatSNTypeArray[x].mappedIndicatorCode==mappedIndicatorCode){
					obx4Counter= discreteRepeatSNTypeArray[x].obx4counter;
					checkerNumDetail=1;
				}
				 
			}
			if (checkerNumDetail==0){
				DiscreteRepeat discreteRepeat = discreteRepeatSNTypeArray[+];
				discreteRepeat.obx4counter = sizeof(discreteRepeatSNTypeArray[*]);
				obx4Counter=discreteRepeat.obx4counter;
				discreteRepeat.code = questPart1;
				discreteRepeat.mappedIndicatorCode=mappedIndicatorCode;
				discreteRepeat.counter=obx2Inc;
			}
		}
	
		for(int x=0;x<sizeof(discreteRepeatArray[*]); x=x+1 )
		{
			if (discreteRepeatArray[x].code == questPart1 && mappedAsOtherInt==0){
				discreteRepeatArray[x].counter = discreteRepeatArray[x].counter+1;
				checkerNum = 1; 
				otherText = discreteRepeatArray[x].otherText;
				obx4Counter= discreteRepeatArray[x].counter;
			}	
		}
		
		
		if (checkerNum==0 && mappedAsOtherInt==0){
			DiscreteRepeat discreteRepeat = discreteRepeatArray[+];
			discreteRepeat.counter = 1;
			discreteRepeat.code = questPart1;
		}
		
		
		
		//Case 2
					
			out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "CWE";
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier=questPart1;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text=questPart2;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=questPart3;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =questPart4;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=questPart5;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem=questPart6;
			
			if(checkPoint>0){
				out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA+"^"+in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA
																											+"^"+in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
			}else{
				out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = quest2Part1+"^"+quest2Part2+"^"+quest2Part3;
			}
			if(in.questionIdentifierNND.#PCDATA =="OTH" && StrSize(otherText)>0){
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] =out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]+"^^^^^^"+otherText;
			}
			out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(obx4Counter);
			out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
	
			obx2Inc = obx2Inc+1;
	
			out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "CWE";
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier=indPart1;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text=indPart2;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=indPart3;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =indPart4;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=indPart5;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem=indPart6;
			if(StrSize(unkObx5)>0){
				out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = unkObx5;
			}
			else{
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]= in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA+"^"+
																										in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA+"^"+
																										in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
			}
			out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(obx4Counter);
			out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
				
			obx2Inc = obx2Inc+1;
			
	}
	
	
}

map MapToDisRepeat( <- Input::MessageElement in, -> int obx2Inc, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
string indPartMain="";
	string indPart1="";
	string questPart1="";
	string questPart2="";
	string questPart3="";
	string questPart4="";
	string questPart5="";
	string questPart6="";

	string otherText="";
	int obx4Counter=1;
	string unkcode="";
	string mappedValue ="";
	string indicatorCode=in.indicatorCd.#PCDATA;
	int startInd = StrFind(indicatorCode, "|");
	mappedValue = StrLeft(indicatorCode,StrFind(indicatorCode, "DiscCdToMultiOBS")-2);
	

	if(mappedValue=="Y" && in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA=="Y"){
		indicatorCode= StrRight(indicatorCode,StrSize(indicatorCode)- startInd-2);
		
		string questionMap=in.questionMap.#PCDATA;
		int start = StrFind(questionMap, "|");
		string subStringRight  = StrRight(questionMap,StrSize(questionMap)- start-1);
		int end =StrFind(questionMap, "|");
		string subStringLeft  = StrLeft(questionMap, start);
	
		
			if(StrFind(subStringLeft, "^") > 0){
				int startPartInt1 = StrFind(subStringLeft, "^");
				questPart1  = StrLeft(subStringLeft,startPartInt1);
				string RemainingPart1  = StrRight(subStringLeft,StrSize(subStringLeft)- startPartInt1-1);
			
			
				int startPartInt2 = StrFind(RemainingPart1, "^");
				questPart2 = StrLeft(RemainingPart1,startPartInt2);
				string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
				
				
				
				int startPartInt3 = StrFind(RemainingPart2, "^");
				
				questPart3  = StrLeft(RemainingPart2,startPartInt3);
				string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
			
				int startPartInt4 = StrFind(RemainingPart3, "^");
				questPart4  = StrLeft(RemainingPart3,startPartInt4);
				string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);
	
				int startPartInt5 = StrFind(RemainingPart4, "^");
				questPart5  = StrLeft(RemainingPart4,startPartInt5);
				questPart6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
				
			}
		if(indicatorCode=="TUB120")
	 		string test="mappedValue";
		
	 	int counter=discreteMulti.counter;
		if (discreteMulti.counter==0){
			discreteMulti.counter = obx2Inc;
			discreteMulti.ObsValueCounter=0;
			discreteMulti.code = questPart1;
			discreteMulti.indicatorCode = in.indicatorCd.#PCDATA;
			discreteMulti.cweQuestionIdentifier = in.questionIdentifier.#PCDATA;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
			out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "CWE";
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier=questPart1;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text=questPart2;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=questPart3;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =questPart4;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=questPart5;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem=questPart6;
			obx2Inc= obx2Inc+1;
	
		}
		else{
			discreteMulti.ObsValueCounter=discreteMulti.ObsValueCounter+1;
		}
		out.OBSERVATION[1].OBX[discreteMulti.counter].ObservationValue[discreteMulti.ObsValueCounter] = subStringRight;
	
		string test31=out.OBSERVATION[1].OBX[discreteMulti.counter].ObservationValue[0];
		string test323=out.OBSERVATION[1].OBX[discreteMulti.counter].ObservationValue[0];
	}
}
	




map MapToRepeatToMultiNND( <- Input::MessageElement in, -> int obx2Inc, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	string indPartMain="";
	string indPart1="";
	string questPart1="";
	string questPart2="";
	string questPart3="";
	string questPart4="";
	string questPart5="";
	string questPart6="";

	string otherText="";
	int obx4Counter=1;
	string unkcode="";
	string mappedValue ="";
	string indicatorCode=in.indicatorCd.#PCDATA;
	int obsCounter = 0;
	int counter=0;
	string output="";
	string originalString="";
	
	
	int startInd = StrFind(indicatorCode, "|");
	mappedValue = StrLeft(indicatorCode,StrFind(indicatorCode, "DiscCdToMultiOBS")-2);
	indicatorCode= StrRight(indicatorCode,StrSize(indicatorCode)- startInd-2);
		
		string questionMap=in.questionMap.#PCDATA;
		int start = StrFind(questionMap, "|");
		string subStringRight  = StrRight(questionMap,StrSize(questionMap)- start-1);
		int end =StrFind(questionMap, "|");
		string subStringLeft  = StrLeft(questionMap, start);
	
		
			if(StrFind(subStringLeft, "^") > 0){
				int startPartInt1 = StrFind(subStringLeft, "^");
				questPart1  = StrLeft(subStringLeft,startPartInt1);
				string RemainingPart1  = StrRight(subStringLeft,StrSize(subStringLeft)- startPartInt1-1);
			
			
				int startPartInt2 = StrFind(RemainingPart1, "^");
				questPart2 = StrLeft(RemainingPart1,startPartInt2);
				string RemainingPart2  = StrRight(RemainingPart1,StrSize(RemainingPart1)- startPartInt2-1);
				
				
				
				int startPartInt3 = StrFind(RemainingPart2, "^");
				
				questPart3  = StrLeft(RemainingPart2,startPartInt3);
				string RemainingPart3  = StrRight(RemainingPart2,StrSize(RemainingPart2)- startPartInt3-1);
			
				int startPartInt4 = StrFind(RemainingPart3, "^");
				questPart4  = StrLeft(RemainingPart3,startPartInt4);
				string RemainingPart4  = StrRight(RemainingPart3,StrSize(RemainingPart3)- startPartInt4-1);
	
				int startPartInt5 = StrFind(RemainingPart4, "^");
				questPart5  = StrLeft(RemainingPart4,startPartInt5);
				questPart6  = StrRight(RemainingPart4,StrSize(RemainingPart4)- startPartInt5-1);
				
			}
		int checkerNum=0;	
		for(int x=0;x<sizeof(repeatMultiArray[*]); x=x+1 )
		{
			if(repeatMultiArray[x].code==questPart1){
				counter=repeatMultiArray[x].counter;
				repeatMultiArray[x].ObsValueCounter= repeatMultiArray[x].ObsValueCounter+1;
				obsCounter = repeatMultiArray[x].ObsValueCounter;
				checkerNum=1;
			}
		}
		if(checkerNum==0){
			DiscreteMulti repeatMulti=repeatMultiArray[+];
			repeatMulti.ObsValueCounter = sizeof(repeatMultiArray[*]);
			counter = obx2Inc;
			repeatMulti.counter = obx2Inc;
			repeatMulti.code = questPart1;
			//counter=repeatMulti.counter;
			//repeatMulti.counter = obx2Inc;
			repeatMulti.ObsValueCounter=0;
			repeatMulti.cweQuestionIdentifier = in.questionIdentifier.#PCDATA;
			out.OBSERVATION[1].OBX[counter].ObservationResultStatus = "F";
			out.OBSERVATION[1].OBX[counter].SetID=obx2Inc+1;
			out.OBSERVATION[1].OBX[counter].ValueType = in.dataElement.questionDataTypeNND.#PCDATA;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.Identifier=questPart1;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.Text=questPart2;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfCodingSystem=questPart3;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateIdentifier =questPart4;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.AlternateText=questPart5;
			out.OBSERVATION[1].OBX[counter].ObservationIdentifier.NameOfAlternateCodingSystem=questPart6;
			out.OBSERVATION[1].OBX[counter].ObservationResultStatus = "F";
		}		
	
	if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType)){
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue))
		{
	    	output=  in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValue.#PCDATA;
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem))
		{
	    	output= output+"^"+ in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueCodingSystem.#PCDATA;
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription))
		{
	    	output= output+"^"+ in.dataElement.LocalComplex#1#Grp1.ceDataType.ceCodedValueDescription.#PCDATA;
		}
	}
	
	else if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType)){
	
		
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue))
		{
	    	output  =in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
	   }
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem))
		{
			output=  output+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription))
		{
	    	output=  output+"^"+ in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
		}
	}
	
	else if (exists( in.dataElement.LocalComplex#1#Grp1.dtDataType)){
	    if (exists( in.dataElement.LocalComplex#1#Grp1.dtDataType.year)){
			originalString=  in.dataElement.LocalComplex#1#Grp1.dtDataType.year.#PCDATA;
		}
		if (exists( in.dataElement.LocalComplex#1#Grp1.dtDataType.date)){
			originalString=  in.dataElement.LocalComplex#1#Grp1.dtDataType.date.#PCDATA;
		}
		int stringSize=StrSize(originalString);
		output= StrLeft(originalString,4);
		if(stringSize>7){
			output=output+StrMid(originalString,5,2);
		}
		if(stringSize>10){
			output=output+StrMid(originalString,8,2);
		}
		
		
	}	
	
	else if (exists( in.dataElement.LocalComplex#1#Grp1.stDataType)){
			output=   in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
	}	
	if (exists( in.dataElement.LocalComplex#1#Grp1.nmDataType)){
			output=   in.dataElement.LocalComplex#1#Grp1.nmDataType.num.#PCDATA;
	}	
	out.OBSERVATION[1].OBX[counter].ObservationValue[obsCounter] = output;
	if(checkerNum==0){
		obx2Inc= obx2Inc+1;
	}		
	
}
	




map MapToDynamincDiscToRepeat( <- Input::MessageElement in, <- string mappedString, <- int splitPart, -> int obx2Inc, -> string parentQuestion, -> int repeatCountNum, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	string seperatorWOObx5="||||";
	int intIndicator = StrFind(mappedString, seperatorWOObx5);
	string partIndicator1="";
	string partIndicator2="";
	string partIndicator3="";
	string partIndicator4="";
	string partIndicator5="";
	string partIndicator6="";
	string partIndicator7="";
	string partIndicator8="";
	string partIndicator9="";
	string partRemaining9="";
	
	string obx1="";
	string partobx11="";
	string obx2="";
	string partobx12="";
	string obx3="";
	string partobx13="";

		
	//int intIndicator1 = StrFind(indicatorMap, "|:");
	//string indicatorPart1    = StrLeft(indicatorMap,StrFind(indicatorMap, "|DiscAsRepeat"));
	//string indicatorPart2  = StrRight(indicatorMap,StrSize(indicatorPart1)- intIndicator1);
	int counter=0;
	
	if(StrFind(mappedString, "^") > 0){
		if(intIndicator>0){
			int intStart1 = StrFind(mappedString, "^");
			partIndicator1  = StrLeft(mappedString,StrFind(mappedString, "^"));
			string partRemaining1  = StrRight(mappedString,StrSize(mappedString)- intStart1-1);
			
			int intStart2 = StrFind(partRemaining1, "^");
			partIndicator2 = StrLeft(partRemaining1,intStart2);
			string partRemaining2  = StrRight(partRemaining1,StrSize(partRemaining1)- intStart2-1);
				
			int intStart3 = StrFind(partRemaining2, "^");
			partIndicator3  = StrLeft(partRemaining2,intStart3);
			string partRemaining3  = StrRight(partRemaining2,StrSize(partRemaining2)- intStart3-1);
		
			int intStart4 = StrFind(partRemaining3, "^");
			partIndicator4  = StrLeft(partRemaining3,intStart4);
			string partRemaining4  = StrRight(partRemaining3,StrSize(partRemaining3)- intStart4-1);
	
			int intStart5 = StrFind(partRemaining4, "^");
			partIndicator5  = StrLeft(partRemaining4,intStart5);
			string partRemaining5  = StrRight(partRemaining4,StrSize(partRemaining4)- intStart5-1);
	
			int intStart6 = StrFind(partRemaining5, "|||");
			partIndicator6  = StrLeft(partRemaining5,intStart6);
			string partRemaining6  = StrRight(partRemaining5,StrSize(partRemaining5)- intStart6+1);
			
			int intStart7 = StrFind(partRemaining6, "|");
			partIndicator7  = StrLeft(partRemaining6,intStart7);
			string partRemaining7  = StrRight(partRemaining6,StrSize(partRemaining6)- (StrSize(partIndicator7)+ intStart7+3));
			
			int intStart8 = StrFind(partRemaining7, "|");
			partIndicator8  = StrLeft(partRemaining7,intStart8);
			string numVar = StrLeft(partIndicator8, StrFind(partRemaining7, "+"));
			int numCounter = StrToInt(StrRight(partIndicator8, StrFind(partRemaining7, "+")));
			
			partRemaining9  =StrRight(partRemaining7,StrSize(partRemaining7)- intStart8-1);;
		}else{
			
			int intStart1 = StrFind(mappedString, "^");
			partIndicator1  = StrLeft(mappedString,StrFind(mappedString, "^"));
			string partRemaining1  = StrRight(mappedString,StrSize(mappedString)- intStart1-1);
			
			int intStart2 = StrFind(partRemaining1, "^");
			partIndicator2 = StrLeft(partRemaining1,intStart2);
			string partRemaining2  = StrRight(partRemaining1,StrSize(partRemaining1)- intStart2-1);
				
			int intStart3 = StrFind(partRemaining2, "^");
			partIndicator3  = StrLeft(partRemaining2,intStart3);
			string partRemaining3  = StrRight(partRemaining2,StrSize(partRemaining2)- intStart3-1);
		
			int intStart4 = StrFind(partRemaining3, "^");
			partIndicator4  = StrLeft(partRemaining3,intStart4);
			string partRemaining4  = StrRight(partRemaining3,StrSize(partRemaining3)- intStart4-1);
	
			int intStart5 = StrFind(partRemaining4, "^");
			partIndicator5  = StrLeft(partRemaining4,intStart5);
			string partRemaining5  = StrRight(partRemaining4,StrSize(partRemaining4)- intStart5-1);
	
			int intStart6 = StrFind(partRemaining5, "|");
			partIndicator6  = StrLeft(partRemaining5,intStart6);
			string partRemaining6  = StrRight(partRemaining5,StrSize(partRemaining5)- intStart6-1);
			
			int intobx1 = StrFind(partRemaining6, "^");
			obx1  = StrLeft(partRemaining6,intobx1);
			string partRemainingintobx1  = StrRight(partRemaining6,StrSize(partRemaining6)- intobx1-1);

			int intobx2 = StrFind(partRemainingintobx1, "^");
			obx2  = StrLeft(partRemainingintobx1,intobx2);
			string partRemainingintobx2  = StrRight(partRemainingintobx1,StrSize(partRemainingintobx1)- intobx2-1);
			
			int intobx3 = StrFind(partRemainingintobx2, "|||");
			obx3  = StrLeft(partRemainingintobx2,intobx3);
			string partRemainingintobx3  = StrRight(partRemainingintobx2,StrSize(partRemainingintobx2)- intobx3-3);

			int intStart8 = StrFind(partRemainingintobx3, "|");
			partIndicator8  = StrLeft(partRemainingintobx3,intStart8);
			string numVar = StrLeft(partIndicator8, StrFind(partRemainingintobx3, "+"));
			int numCounter = StrToInt(StrRight(partIndicator8, StrFind(partRemainingintobx3, "+")));
			
			partRemaining9  =StrRight(partRemainingintobx3,StrSize(partRemainingintobx3)- intStart8-1);;
		}

		parentQuestion=partRemaining9;
		int maxObxCounter=0;	
		
		for(int x=0;x<sizeof(dynamicRepeatMultiArray[*]); x=x+1 )
		{
			if ((dynamicRepeatMultiArray[x].parentCode == partRemaining9 ) &&  (dynamicRepeatMultiArray[x].partIndicator==partIndicator8) ){
					counter= dynamicRepeatMultiArray[x].obx4counter;
			}
			else if ((dynamicRepeatMultiArray[x].parentCode == partRemaining9) && counter==0){
					if(maxObxCounter<dynamicRepeatMultiArray[x].obx4counter){
						maxObxCounter=dynamicRepeatMultiArray[x].obx4counter;
					}
			}
		}

		
	if(maxObxCounter==0 && counter==0){
		DynamicRepeatMulti dynamicRepeat = dynamicRepeatMultiArray[+];
		dynamicRepeat.parentCode=partRemaining9;
		dynamicRepeat.partIndicator=partIndicator8;
		dynamicRepeat.obx4counter=1;
		counter = dynamicRepeat.obx4counter;
	}else if( maxObxCounter>0){
		DynamicRepeatMulti dynamicRepeat = dynamicRepeatMultiArray[+];
		dynamicRepeat.parentCode=partRemaining9;
		dynamicRepeat.partIndicator=partIndicator8;
		dynamicRepeat.obx4counter=maxObxCounter+1;		
		counter = dynamicRepeat.obx4counter;	
	}
 		repeatCountNum=counter;
		out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
		
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier= partIndicator1;;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text= partIndicator2;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=partIndicator3;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =partIndicator4;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=partIndicator5;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem= partIndicator6;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(counter);	
		out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";

 
	 		
		if(in.dataElement.questionDataTypeNND.#PCDATA=="CWE" || splitPart==2){
		out.OBSERVATION[1].OBX[obx2Inc].ValueType = "CWE";
		if(intIndicator>0){
			string codedValue = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
				codedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
			string codedValueDescription = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
				codedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
			string codedValueCodingSystem = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
				codedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
			string localCodedValue = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
				localCodedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
			string localCodedValueDescription = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
				localCodedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
			string localCodedValueCodingSystem = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
				localCodedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
			string originalOtherText = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA)){
				string textData=in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
				MapToRemoveSpecialCharacter(textData, textData);
				originalOtherText = "^^^" + textData;
			}
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = 
				 codedValue + "^" +
				 codedValueDescription + "^" +
				 codedValueCodingSystem + "^" +
				 localCodedValue + "^" +
				 localCodedValueDescription + "^" +
				 localCodedValueCodingSystem + 
				 originalOtherText;	
			}else{
				out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = obx1 + "^" +
				 obx2 + "^" +
				 obx3 + "^";
			}
		}
		
		else if(in.dataElement.questionDataTypeNND.#PCDATA=="TS"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType ="TS";
			string time  =in.dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			string year="";
			string month="";
			string day="";
			string hour="";
			string minute="";
			string second="";
			string seperator="";
			string milli="";
			
			int stringSize=StrSize(time);
			year = StrLeft(time,4);
			if(stringSize<7){
				month="00";	
			}else{
				month =  StrMid(time,5,2);
			}
			if(stringSize<10){
				day= "00";	
			}else{
				day= StrMid(time,8,2);
			}
			if(stringSize<13){
				hour="00";	
			}else{
				hour=StrMid(time,11,2);
			}
		
			if(stringSize<16){
				minute = "00";	
			}else{
				minute = StrMid(time,14,2);
			}
			if(stringSize<19){
				second = "00";
			}else{
				second = StrMid(time,17,2);
			}
		
			if(stringSize<23){
				milli="000";
				seperator=".";
			}else{
				seperator=".";
				milli= StrMid(time,20,3);
			}
		
			string timeOut=year+month+day+hour+minute+second+seperator+milli;

			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]=timeOut;
		}
		else if (in.dataElement.questionDataTypeNND.#PCDATA == "TX"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "ST";
			string textData = in.dataElement.LocalComplex#1#Grp1.txDataType.textData.#PCDATA;
			textData = StrReplace(textData, "\n", " ");
			MapToRemoveSpecialCharacter(textData, textData);
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		}
		else if (in.dataElement.questionDataTypeNND.#PCDATA == "ST"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = in.dataElement.questionDataTypeNND.#PCDATA;
			string textData = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			MapToRemoveSpecialCharacter(textData, textData);
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		} 
		
		obx2Inc= obx2Inc+1;
	}
}


map MapToDynamincParentRptToRpt( <- Input::MessageElement in, -> int obx2Inc, <- string messageType, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	
	string parentCode= in.indicatorCd.#PCDATA;
	int intStart = StrFind(parentCode, "|ParentRepeatBlock");
	string partIndicator1 = StrLeft(parentCode,intStart);
	string paretnQuestionIdentifier= StrRemove(partIndicator1,"||:");

	string questionId=in.questionIdentifierNND.#PCDATA;
	
	string ObsSubIdCounter=in.observationSubID.#PCDATA;
	int maxObxCounter=0;	
	int counter=0;	
		
		for(int x=0;x<sizeof(dynamicRepeatMultiArray[*]); x=x+1 )
		{
			if ((dynamicRepeatMultiArray[x].parentCode == paretnQuestionIdentifier ) &&  (dynamicRepeatMultiArray[x].partIndicator==ObsSubIdCounter) ){
					counter= dynamicRepeatMultiArray[x].obx4counter;
			}
			else if ((dynamicRepeatMultiArray[x].parentCode == paretnQuestionIdentifier) && counter==0){
					if(maxObxCounter<dynamicRepeatMultiArray[x].obx4counter){
						maxObxCounter=dynamicRepeatMultiArray[x].obx4counter;
					}
			}
		}


	
	if(maxObxCounter==0 && counter==0){
		DynamicRepeatMulti dynamicRepeat = dynamicRepeatMultiArray[+];
		dynamicRepeat.parentCode=paretnQuestionIdentifier;
		dynamicRepeat.partIndicator=ObsSubIdCounter;
		dynamicRepeat.obx4counter=1;
		counter = dynamicRepeat.obx4counter;
	}else if( maxObxCounter>0){
		DynamicRepeatMulti dynamicRepeat = dynamicRepeatMultiArray[+];
		dynamicRepeat.parentCode=paretnQuestionIdentifier;
		dynamicRepeat.partIndicator=ObsSubIdCounter;
		dynamicRepeat.obx4counter=maxObxCounter+1;		
		counter = dynamicRepeat.obx4counter;	
	}
	
	out.OBSERVATION[1].OBX[obx2Inc].ValueType = in.dataElement.questionDataTypeNND.#PCDATA;
	out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier= in.questionIdentifierNND.#PCDATA;;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text= in.questionLabelNND.#PCDATA;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=in.questionOID.#PCDATA;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =in.questionIdentifier.#PCDATA;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=in.questionLabel.#PCDATA;
	out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem= "L";
	out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";
	out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(counter);			



	if(in.dataElement.questionDataTypeNND.#PCDATA=="CWE"){
		string codedValue = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
			codedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
		string codedValueDescription = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
			codedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
		string codedValueCodingSystem = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
			codedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
		string localCodedValue = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
			localCodedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
		string localCodedValueDescription = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
			localCodedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
		string localCodedValueCodingSystem = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
			localCodedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
		string originalOtherText = "";
		if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA)){
				string textData=in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
				MapToRemoveSpecialCharacter(textData, textData);
				originalOtherText = "^^^" + textData;
		}
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = 
			 codedValue + "^" +
			 codedValueDescription + "^" +
			 codedValueCodingSystem + "^" +
			 localCodedValue + "^" +
			 localCodedValueDescription + "^" +
			 localCodedValueCodingSystem + 
			 originalOtherText;	
		}
		
		if(in.dataElement.questionDataTypeNND.#PCDATA=="TS"){
		 
			string time  =in.dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			string year="";
			string month="";
			string day="";
			string hour="";
			string minute="";
			string second="";
			string seperator="";
			string milli="";
			
			int stringSize=StrSize(time);
			year = StrLeft(time,4);
			if(stringSize<7){
				month="00";	
			}else{
				month =  StrMid(time,5,2);
			}
			if(stringSize<10){
				day= "00";	
			}else{
				day= StrMid(time,8,2);
			}
			if(stringSize<13){
				hour="00";	
			}else{
				hour=StrMid(time,11,2);
			}
		
			if(stringSize<16){
				minute = "00";	
			}else{
				minute = StrMid(time,14,2);
			}
			if(stringSize<19){
				second = "00";
			}else{
				second = StrMid(time,17,2);
			}
		
			if(stringSize<23){
				milli="000";
				seperator=".";
			}else{
				seperator=".";
				milli= StrMid(time,20,3);
			}
		
			string timeOut=year+month+day+hour+minute+second+seperator+milli;

			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]=timeOut;
		}
		if (in.dataElement.questionDataTypeNND.#PCDATA == "TX"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "ST";
			string textData = in.dataElement.LocalComplex#1#Grp1.txDataType.textData.#PCDATA;
			textData = StrReplace(textData, "\n", " ");
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		}
		if (in.dataElement.questionDataTypeNND.#PCDATA == "ST"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = in.dataElement.questionDataTypeNND.#PCDATA;
			string textData = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		} 
	obx2Inc= obx2Inc+1;
}


map MapToDynamicRootlDiscToRepeat( <- Input::MessageElement in, -> int obx2Inc, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	string questionMap=in.questionMap.#PCDATA;
	string divider="++";	
	string seperatorVal="|";	
	string seperatorParent="|:";	
	string seperatorSub="^";	
	string questionIdentifier="";
	int intIndicator1 = StrFind(questionMap, divider);
	int countNum=0;
 	if(intIndicator1>0){
	 	string part1 =  StrLeft(questionMap,StrFind(questionMap, divider)); 		
		MapToDynamincDiscToRepeat(in, part1,1, obx2Inc, questionIdentifier, countNum, out);
		string part2  = StrRight(questionMap,StrSize(questionMap)- (intIndicator1+StrSize(divider)));
				MapToDynamincDiscToRepeat(in, part2,2, obx2Inc, questionIdentifier, countNum, out);
	}
 	else{
 		MapToDynamincDiscToRepeat(in, questionMap,1, obx2Inc, questionIdentifier,countNum, out);
 	}
 	int intIndicator2 = StrFind(in.indicatorCd.#PCDATA, seperatorParent);
 	if(intIndicator2>1){
		string part3  = StrLeft(in.indicatorCd.#PCDATA,StrFind(in.indicatorCd.#PCDATA, seperatorVal));
		string part4  = StrRight(in.indicatorCd.#PCDATA,StrSize(in.indicatorCd.#PCDATA)- StrFind(in.indicatorCd.#PCDATA, seperatorVal)-1);
		string part5  = StrLeft(part4,StrFind(part4, seperatorVal));
		string dataType=in.dataElement.questionDataTypeNND.#PCDATA;
		if(dataType=="CWE"){
		
			string codedValue=in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
			
			if(StrFind(in.indicatorCd.#PCDATA, (codedValue+seperatorSub))==0 || StrFind(in.indicatorCd.#PCDATA, (seperatorSub+codedValue+seperatorSub))>0 
			||  StrFind(in.indicatorCd.#PCDATA, (seperatorSub+codedValue+seperatorVal))>0){
				MapToDynamicIndicatorToObx(in, questionIdentifier, part5, countNum, obx2Inc, out);
			}
			
		}
			
	}
 	
 	
}



map MapToDynamicIndicatorToObx( <- Input::MessageElement in, <- string questionIdentifer, <- string mappedString, <- int countNum, -> int obx2Inc, -> Output::ORUR01#PATIENT_RESULT#ORDER_OBSERVATION out )
{
	string seperatorWOObx5="|:";
	int intIndicator = StrFind(in.indicatorCd.#PCDATA, seperatorWOObx5);
	string partIndicator1="";
	string partIndicator2="";
	string partIndicator3="";
	string partIndicator4="";
	string partIndicator5="";
	string partIndicator6="";
	
	string obx1="";
	string partobx11="";
	string obx2="";
	string partobx12="";
	string obx3="";
	string partobx13="";

	
	if(StrFind(mappedString, "^") > 0){
			int intStart1 = StrFind(mappedString, "^");
			partIndicator1  = StrLeft(mappedString,StrFind(mappedString, "^"));
			string partRemaining1  = StrRight(mappedString,StrSize(mappedString)- intStart1-1);
			
			int intStart2 = StrFind(partRemaining1, "^");
			partIndicator2 = StrLeft(partRemaining1,intStart2);
			string partRemaining2  = StrRight(partRemaining1,StrSize(partRemaining1)- intStart2-1);
				
			int intStart3 = StrFind(partRemaining2, "^");
			partIndicator3  = StrLeft(partRemaining2,intStart3);
			string partRemaining3  = StrRight(partRemaining2,StrSize(partRemaining2)- intStart3-1);
		
			int intStart4 = StrFind(partRemaining3, "^");
			partIndicator4  = StrLeft(partRemaining3,intStart4);
			string partRemaining4  = StrRight(partRemaining3,StrSize(partRemaining3)- intStart4-1);
	
			int intStart5 = StrFind(partRemaining4, "^");
			partIndicator5  = StrLeft(partRemaining4,intStart5);
			string partRemaining5  = StrRight(partRemaining4,StrSize(partRemaining4)- intStart5-1);
	
			int intStart6 = StrFind(partRemaining5, "|||");
			partIndicator6  = StrLeft(partRemaining5,intStart6);
			string partRemaining6  = StrRight(partRemaining5,StrSize(partRemaining5)- intStart6+1);
			
	
				
	
	 	 
		out.OBSERVATION[1].OBX[obx2Inc].SetID=obx2Inc+1;
		
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Identifier= partIndicator1;;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.Text= partIndicator2;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfCodingSystem=partIndicator3;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateIdentifier =partIndicator4;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.AlternateText=partIndicator5;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationIdentifier.NameOfAlternateCodingSystem= partIndicator6;
		out.OBSERVATION[1].OBX[obx2Inc].ObservationSubID=IntToStr(countNum);	
		out.OBSERVATION[1].OBX[obx2Inc].ObservationResultStatus = "F";

 
	 		
		if(in.dataElement.questionDataTypeNND.#PCDATA=="CWE"){
		out.OBSERVATION[1].OBX[obx2Inc].ValueType = "CWE";
		if(intIndicator>2){
			string codedValue = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA))
				codedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValue.#PCDATA;
			string codedValueDescription = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA))
				codedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueDescription.#PCDATA;
			string codedValueCodingSystem = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA))
				codedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweCodedValueCodingSystem.#PCDATA;
			string localCodedValue = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA))
				localCodedValue = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValue.#PCDATA;
			string localCodedValueDescription = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA))
				localCodedValueDescription = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueDescription.#PCDATA;
			string localCodedValueCodingSystem = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA))
				localCodedValueCodingSystem = in.dataElement.LocalComplex#1#Grp1.cweDataType.cweLocalCodedValueCodingSystem.#PCDATA;
			string originalOtherText = "";
			if (exists(in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA))
				originalOtherText = "^^^" + in.dataElement.LocalComplex#1#Grp1.cweDataType.cweOriginalText.#PCDATA;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = 
				 codedValue + "^" +
				 codedValueDescription + "^" +
				 codedValueCodingSystem + "^" +
				 localCodedValue + "^" +
				 localCodedValueDescription + "^" +
				 localCodedValueCodingSystem + 
				 originalOtherText;	
			}else{
				out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = obx1 + "^" +
				 obx2 + "^" +
				 obx3 + "^";
			}
		}
		
		if(in.dataElement.questionDataTypeNND.#PCDATA=="TS"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType ="TS";
			string time  =in.dataElement.LocalComplex#1#Grp1.tsDataType.time.#PCDATA;
			string year="";
			string month="";
			string day="";
			string hour="";
			string minute="";
			string second="";
			string seperator="";
			string milli="";
			
			int stringSize=StrSize(time);
			year = StrLeft(time,4);
			if(stringSize<7){
				month="00";	
			}else{
				month =  StrMid(time,5,2);
			}
			if(stringSize<10){
				day= "00";	
			}else{
				day= StrMid(time,8,2);
			}
			if(stringSize<13){
				hour="00";	
			}else{
				hour=StrMid(time,11,2);
			}
		
			if(stringSize<16){
				minute = "00";	
			}else{
				minute = StrMid(time,14,2);
			}
			if(stringSize<19){
				second = "00";
			}else{
				second = StrMid(time,17,2);
			}
		
			if(stringSize<23){
				milli="000";
				seperator=".";
			}else{
				seperator=".";
				milli= StrMid(time,20,3);
			}
		
			string timeOut=year+month+day+hour+minute+second+seperator+milli;

			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0]=timeOut;
		}
		if (in.dataElement.questionDataTypeNND.#PCDATA == "TX"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = "ST";
			string textData = in.dataElement.LocalComplex#1#Grp1.txDataType.textData.#PCDATA;
			textData = StrReplace(textData, "\n", " ");
			MapToRemoveSpecialCharacter(textData, textData);
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		}
		if (in.dataElement.questionDataTypeNND.#PCDATA == "ST"){
			out.OBSERVATION[1].OBX[obx2Inc].ValueType = in.dataElement.questionDataTypeNND.#PCDATA;
			string textData = in.dataElement.LocalComplex#1#Grp1.stDataType.stringData.#PCDATA;
			out.OBSERVATION[1].OBX[obx2Inc].ObservationValue[0] = textData;	
		} 
		
		obx2Inc= obx2Inc+1;
	}
}


map MapToRemoveSpecialCharacter( <- string in, -> string out )
{

	out=StrReplace(out, "\\", "\\E\\");
	out=StrReplace(out, "|", "\\F\\");
	out=StrReplace(out, "~", "\\R\\");
	out=StrReplace(out, "^", "\\S\\");
	out=StrReplace(out, "&", "\\T\\");
}


