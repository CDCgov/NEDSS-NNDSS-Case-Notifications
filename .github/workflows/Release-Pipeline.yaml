name: Release Pipeline (Pump version and Auto merge)

on:
  workflow_dispatch:
    inputs:
      microservice_name:
        description: "Select the microservice to release."
        required: true
        type: choice
        options:
          - xml-hl7-parser-service
          - case-notification-service
          - data-extraction-service
      version_bump_type:
        description: >
          Select the version bump type:
          - MAJOR RELEASE: Increments the major version  (e.g., 1.0.0 → 2.0.0)
          - RELEASE: Increments the minor version        (e.g., 1.0.0 → 1.1.0)
          - MINOR: Increments the patch version          (e.g., 1.0.0 → 1.0.1)
          - BATCH: Increments the batch/metadata version (e.g., 1.0.0 → 1.0.0.1)
        required: true
        type: choice
        default: MINOR
        options:
          - MAJOR RELEASE
          - RELEASE
          - MINOR
#          - BATCH

jobs:
  bump-version:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Git config for bot
        run: |
          git config --global user.name "${{ secrets.BOT_USERNAME }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"

      - name: Determine new version
        id: versioning
        run: |
          gradle_path="./${{ inputs.microservice_name }}/build.gradle"
          current_version=$(grep "^version *= *" "$gradle_path" | sed -E "s/version *= *['\"]?([^'\"]*)['\"]?/\1/")
          echo "Current version: $current_version"

          version_core=$(echo "$current_version" | sed 's/-RELEASE//')
          IFS='.' read -r major minor patch batch <<< "$(echo "$version_core" | awk -F. '{ printf("%s.%s.%s.%s\n", $1,$2,$3,(NF>3)?$4:0) }')"

          bump="${{ inputs.version_bump_type }}"
          case "$bump" in
            "RELEASE")
              minor=$((minor + 1)); patch=0; batch=0 ;;
            "MINOR")
              patch=$((patch + 1)); batch=0 ;;
            "BATCH")
              batch=$((batch + 1)) ;;
            "MAJOR RELEASE")
              major=$((major + 1)); minor=0; patch=0; batch=0 ;;
            *)
              echo "Unknown bump type: $bump"; exit 1 ;;
          esac

          if [ "$batch" -gt 0 ]; then
            new_version="${major}.${minor}.${patch}.${batch}-RELEASE"
          else
            new_version="${major}.${minor}.${patch}-RELEASE"
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "CLASSIFIER=RELEASE" >> $GITHUB_ENV

      - name: Update version in build.gradle
        run: |
          gradle_path="./${{ inputs.microservice_name }}/build.gradle"
          sed -i "s/^version = .*/version = '${{ steps.versioning.outputs.new_version }}'/" "$gradle_path"
          echo "Updated version in $gradle_path to ${{ steps.versioning.outputs.new_version }}"

      - name: Update version in ROOT build.gradle for HelmChart
        run: |
          gradle_path="./build.gradle"
          new_version="${{ steps.versioning.outputs.new_version }}"
          sed -i -E "s/^([[:space:]]*version[[:space:]]*=[[:space:]]*)['\"][^'\"]*['\"](.*)/\1'${new_version}'\2/" "$gradle_path"
          echo "Updated version in $gradle_path to ${new_version}"

      - name: Commit and create PR using bot
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          branch_name="version-bump-${{ inputs.microservice_name }}-${{ steps.versioning.outputs.new_version }}"
          git checkout -b "$branch_name"
          git add "./${{ inputs.microservice_name }}/build.gradle"
          git add "./build.gradle"
          git commit -m "chore: bump version of ${{ inputs.microservice_name }} to ${{ steps.versioning.outputs.new_version }}"
          git push --set-upstream origin "$branch_name"

          pr_url=$(gh pr create \
            --title "Bump ${{ inputs.microservice_name }} version to ${{ steps.versioning.outputs.new_version }}" \
            --body "This PR updates \`${{ inputs.microservice_name }}/build.gradle\` to \`${{ steps.versioning.outputs.new_version }}\`." \
            --base main \
            --head "$branch_name")

          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "pr_url=$pr_url"

      - name: Approve PR using repo account
        env:
          GH_TOKEN: ${{ secrets.REPOS_TOKEN }}
        run: |
          gh pr review version-bump-${{ inputs.microservice_name }}-${{ steps.versioning.outputs.new_version }} --approve

      - name: Auto-merge the PR
        env:
          GH_TOKEN: ${{ secrets.REPOS_TOKEN }}
        run: |
          gh pr merge version-bump-${{ inputs.microservice_name }}-${{ steps.versioning.outputs.new_version }} --squash --delete-branch --admin
